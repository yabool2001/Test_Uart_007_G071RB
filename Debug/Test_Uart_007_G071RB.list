
Test_Uart_007_G071RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c7c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e28  08003e28  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e30  08003e30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08003ea8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08003ea8  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010aae  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002148  00000000  00000000  00030b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00032c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00033a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dbf  00000000  00000000  00034788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010821  00000000  00000000  0004d547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a11ee  00000000  00000000  0005dd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fef56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000360c  00000000  00000000  000fefa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003d20 	.word	0x08003d20

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	08003d20 	.word	0x08003d20

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 fb68 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f820 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f940 	bl	80008d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000650:	f000 f8f0 	bl	8000834 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000654:	f000 f862 	bl	800071c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000658:	f000 f89e 	bl	8000798 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT ( &htim6 ) ;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <main+0x3c>)
 800065e:	0018      	movs	r0, r3
 8000660:	f001 fd7a 	bl	8002158 <HAL_TIM_Base_Start_IT>
  uart_status = HAL_UART_Transmit ( &huart2 , hello , strlen ( (const char*) hello ) , UART_TX_TIMEOUT ) ;
 8000664:	4906      	ldr	r1, [pc, #24]	; (8000680 <main+0x40>)
 8000666:	4807      	ldr	r0, [pc, #28]	; (8000684 <main+0x44>)
 8000668:	2364      	movs	r3, #100	; 0x64
 800066a:	221d      	movs	r2, #29
 800066c:	f002 f87e 	bl	800276c <HAL_UART_Transmit>
 8000670:	0003      	movs	r3, r0
 8000672:	001a      	movs	r2, r3
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <main+0x48>)
 8000676:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000678:	e7fe      	b.n	8000678 <main+0x38>
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	2000008c 	.word	0x2000008c
 8000680:	08003d44 	.word	0x08003d44
 8000684:	2000016c 	.word	0x2000016c
 8000688:	20000202 	.word	0x20000202

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b093      	sub	sp, #76	; 0x4c
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	2410      	movs	r4, #16
 8000694:	193b      	adds	r3, r7, r4
 8000696:	0018      	movs	r0, r3
 8000698:	2338      	movs	r3, #56	; 0x38
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f002 fecd 	bl	800343c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a2:	003b      	movs	r3, r7
 80006a4:	0018      	movs	r0, r3
 80006a6:	2310      	movs	r3, #16
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f002 fec6 	bl	800343c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fe2f 	bl	8001318 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2202      	movs	r2, #2
 80006be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	0052      	lsls	r2, r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2240      	movs	r2, #64	; 0x40
 80006d2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fe67 	bl	80013b0 <HAL_RCC_OscConfig>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006e6:	f000 f993 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	003b      	movs	r3, r7
 80006ec:	2207      	movs	r2, #7
 80006ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f0:	003b      	movs	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	003b      	movs	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	003b      	movs	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000702:	003b      	movs	r3, r7
 8000704:	2100      	movs	r1, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f001 f96c 	bl	80019e4 <HAL_RCC_ClockConfig>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000710:	f000 f97e 	bl	8000a10 <Error_Handler>
  }
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b013      	add	sp, #76	; 0x4c
 800071a:	bd90      	pop	{r4, r7, pc}

0800071c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	0018      	movs	r0, r3
 8000726:	230c      	movs	r3, #12
 8000728:	001a      	movs	r2, r3
 800072a:	2100      	movs	r1, #0
 800072c:	f002 fe86 	bl	800343c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_TIM6_Init+0x6c>)
 8000732:	4a16      	ldr	r2, [pc, #88]	; (800078c <MX_TIM6_Init+0x70>)
 8000734:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_TIM6_Init+0x6c>)
 8000738:	4a15      	ldr	r2, [pc, #84]	; (8000790 <MX_TIM6_Init+0x74>)
 800073a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_TIM6_Init+0x6c>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000-1;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_TIM6_Init+0x6c>)
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <MX_TIM6_Init+0x78>)
 8000746:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_TIM6_Init+0x6c>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_TIM6_Init+0x6c>)
 8000750:	0018      	movs	r0, r3
 8000752:	f001 fca9 	bl	80020a8 <HAL_TIM_Base_Init>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800075a:	f000 f959 	bl	8000a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800076a:	1d3a      	adds	r2, r7, #4
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_TIM6_Init+0x6c>)
 800076e:	0011      	movs	r1, r2
 8000770:	0018      	movs	r0, r3
 8000772:	f001 ff1f 	bl	80025b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800077a:	f000 f949 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b004      	add	sp, #16
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	2000008c 	.word	0x2000008c
 800078c:	40001000 	.word	0x40001000
 8000790:	00003e7f 	.word	0x00003e7f
 8000794:	000007cf 	.word	0x000007cf

08000798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_USART1_UART_Init+0x94>)
 800079e:	4a24      	ldr	r2, [pc, #144]	; (8000830 <MX_USART1_UART_Init+0x98>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007a2:	4b22      	ldr	r3, [pc, #136]	; (800082c <MX_USART1_UART_Init+0x94>)
 80007a4:	22e1      	movs	r2, #225	; 0xe1
 80007a6:	0252      	lsls	r2, r2, #9
 80007a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_USART1_UART_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_USART1_UART_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_USART1_UART_Init+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_USART1_UART_Init+0x94>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_USART1_UART_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_USART1_UART_Init+0x94>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_USART1_UART_Init+0x94>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_USART1_UART_Init+0x94>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART1_UART_Init+0x94>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_USART1_UART_Init+0x94>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 ff6c 	bl	80026c0 <HAL_UART_Init>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007ec:	f000 f910 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART1_UART_Init+0x94>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	0018      	movs	r0, r3
 80007f6:	f002 fd17 	bl	8003228 <HAL_UARTEx_SetTxFifoThreshold>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007fe:	f000 f907 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_USART1_UART_Init+0x94>)
 8000804:	2100      	movs	r1, #0
 8000806:	0018      	movs	r0, r3
 8000808:	f002 fd4e 	bl	80032a8 <HAL_UARTEx_SetRxFifoThreshold>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000810:	f000 f8fe 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <MX_USART1_UART_Init+0x94>)
 8000816:	0018      	movs	r0, r3
 8000818:	f002 fccc 	bl	80031b4 <HAL_UARTEx_DisableFifoMode>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000820:	f000 f8f6 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	200000d8 	.word	0x200000d8
 8000830:	40013800 	.word	0x40013800

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 800083a:	4a24      	ldr	r2, [pc, #144]	; (80008cc <MX_USART2_UART_Init+0x98>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 8000840:	22e1      	movs	r2, #225	; 0xe1
 8000842:	0252      	lsls	r2, r2, #9
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 800087e:	0018      	movs	r0, r3
 8000880:	f001 ff1e 	bl	80026c0 <HAL_UART_Init>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000888:	f000 f8c2 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 800088e:	2100      	movs	r1, #0
 8000890:	0018      	movs	r0, r3
 8000892:	f002 fcc9 	bl	8003228 <HAL_UARTEx_SetTxFifoThreshold>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800089a:	f000 f8b9 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f002 fd00 	bl	80032a8 <HAL_UARTEx_SetRxFifoThreshold>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008ac:	f000 f8b0 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x94>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f002 fc7e 	bl	80031b4 <HAL_UARTEx_DisableFifoMode>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008bc:	f000 f8a8 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	2000016c 	.word	0x2000016c
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b089      	sub	sp, #36	; 0x24
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	240c      	movs	r4, #12
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	0018      	movs	r0, r3
 80008dc:	2314      	movs	r3, #20
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f002 fdab 	bl	800343c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <MX_GPIO_Init+0xc0>)
 80008e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ea:	4b29      	ldr	r3, [pc, #164]	; (8000990 <MX_GPIO_Init+0xc0>)
 80008ec:	2104      	movs	r1, #4
 80008ee:	430a      	orrs	r2, r1
 80008f0:	635a      	str	r2, [r3, #52]	; 0x34
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <MX_GPIO_Init+0xc0>)
 80008f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008f6:	2204      	movs	r2, #4
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fe:	4b24      	ldr	r3, [pc, #144]	; (8000990 <MX_GPIO_Init+0xc0>)
 8000900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_GPIO_Init+0xc0>)
 8000904:	2120      	movs	r1, #32
 8000906:	430a      	orrs	r2, r1
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_GPIO_Init+0xc0>)
 800090c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090e:	2220      	movs	r2, #32
 8000910:	4013      	ands	r3, r2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_GPIO_Init+0xc0>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <MX_GPIO_Init+0xc0>)
 800091c:	2101      	movs	r1, #1
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_GPIO_Init+0xc0>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000926:	2201      	movs	r2, #1
 8000928:	4013      	ands	r3, r2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 800092e:	23a0      	movs	r3, #160	; 0xa0
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	2200      	movs	r2, #0
 8000934:	2120      	movs	r1, #32
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fcb6 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	0192      	lsls	r2, r2, #6
 8000942:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2288      	movs	r2, #136	; 0x88
 8000948:	0352      	lsls	r2, r2, #13
 800094a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000952:	193b      	adds	r3, r7, r4
 8000954:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <MX_GPIO_Init+0xc4>)
 8000956:	0019      	movs	r1, r3
 8000958:	0010      	movs	r0, r2
 800095a:	f000 fb41 	bl	8000fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 800095e:	0021      	movs	r1, r4
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2220      	movs	r2, #32
 8000964:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2201      	movs	r2, #1
 800096a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2202      	movs	r2, #2
 8000976:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 8000978:	187a      	adds	r2, r7, r1
 800097a:	23a0      	movs	r3, #160	; 0xa0
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	0011      	movs	r1, r2
 8000980:	0018      	movs	r0, r3
 8000982:	f000 fb2d 	bl	8000fe0 <HAL_GPIO_Init>

}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b009      	add	sp, #36	; 0x24
 800098c:	bd90      	pop	{r4, r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	40021000 	.word	0x40021000
 8000994:	50000800 	.word	0x50000800

08000998 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b08d      	sub	sp, #52	; 0x34
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	char * tx_buff[10] ;
	if ( htim->Instance == TIM6 )
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d122      	bne.n	80009f0 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		sprintf ( (char *) tx_buff , "%s %03u\n" , press , c ) ;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80009b0:	4914      	ldr	r1, [pc, #80]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80009b2:	2408      	movs	r4, #8
 80009b4:	1938      	adds	r0, r7, r4
 80009b6:	f002 fd49 	bl	800344c <siprintf>
		uart_status = HAL_UART_Transmit ( &huart1 , (uint8_t*) tx_buff , strlen ( (const char*) tx_buff ) , UART_TX_TIMEOUT ) ;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff fba1 	bl	8000104 <strlen>
 80009c2:	0003      	movs	r3, r0
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	1939      	adds	r1, r7, r4
 80009c8:	480f      	ldr	r0, [pc, #60]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80009ca:	2364      	movs	r3, #100	; 0x64
 80009cc:	f001 fece 	bl	800276c <HAL_UART_Transmit>
 80009d0:	0003      	movs	r3, r0
 80009d2:	001a      	movs	r2, r3
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80009d6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin ( GREEN_GPIO_Port, GREEN_Pin ) ;
 80009d8:	23a0      	movs	r3, #160	; 0xa0
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	2120      	movs	r1, #32
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 fc7f 	bl	80012e2 <HAL_GPIO_TogglePin>
		c++ ;
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80009ee:	801a      	strh	r2, [r3, #0]
	}
}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b00d      	add	sp, #52	; 0x34
 80009f6:	bd90      	pop	{r4, r7, pc}
 80009f8:	40001000 	.word	0x40001000
 80009fc:	20000200 	.word	0x20000200
 8000a00:	08003d64 	.word	0x08003d64
 8000a04:	08003d38 	.word	0x08003d38
 8000a08:	200000d8 	.word	0x200000d8
 8000a0c:	20000202 	.word	0x20000202

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_MspInit+0x44>)
 8000a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_MspInit+0x44>)
 8000a28:	2101      	movs	r1, #1
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_MspInit+0x44>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	2201      	movs	r2, #1
 8000a34:	4013      	ands	r3, r2
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x44>)
 8000a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_MspInit+0x44>)
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	0549      	lsls	r1, r1, #21
 8000a44:	430a      	orrs	r2, r1
 8000a46:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_MspInit+0x44>)
 8000a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	055b      	lsls	r3, r3, #21
 8000a50:	4013      	ands	r3, r2
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <HAL_TIM_Base_MspInit+0x44>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d113      	bne.n	8000a9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <HAL_TIM_Base_MspInit+0x48>)
 8000a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_TIM_Base_MspInit+0x48>)
 8000a7c:	2110      	movs	r1, #16
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_TIM_Base_MspInit+0x48>)
 8000a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a86:	2210      	movs	r2, #16
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	2011      	movs	r0, #17
 8000a94:	f000 fa72 	bl	8000f7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8000a98:	2011      	movs	r0, #17
 8000a9a:	f000 fa84 	bl	8000fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b004      	add	sp, #16
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	40001000 	.word	0x40001000
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b099      	sub	sp, #100	; 0x64
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	234c      	movs	r3, #76	; 0x4c
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	0018      	movs	r0, r3
 8000abe:	2314      	movs	r3, #20
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f002 fcba 	bl	800343c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac8:	2418      	movs	r4, #24
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	0018      	movs	r0, r3
 8000ace:	2334      	movs	r3, #52	; 0x34
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	f002 fcb2 	bl	800343c <memset>
  if(huart->Instance==USART1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a45      	ldr	r2, [pc, #276]	; (8000bf4 <HAL_UART_MspInit+0x144>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d13e      	bne.n	8000b60 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2200      	movs	r2, #0
 8000aec:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	0018      	movs	r0, r3
 8000af2:	f001 f921 	bl	8001d38 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d001      	beq.n	8000afe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000afa:	f7ff ff89 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afe:	4b3e      	ldr	r3, [pc, #248]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b02:	4b3d      	ldr	r3, [pc, #244]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	01c9      	lsls	r1, r1, #7
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b0c:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	01db      	lsls	r3, r3, #7
 8000b14:	4013      	ands	r3, r2
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b37      	ldr	r3, [pc, #220]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b1e:	4b36      	ldr	r3, [pc, #216]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b20:	2104      	movs	r1, #4
 8000b22:	430a      	orrs	r2, r1
 8000b24:	635a      	str	r2, [r3, #52]	; 0x34
 8000b26:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b32:	214c      	movs	r1, #76	; 0x4c
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2230      	movs	r2, #48	; 0x30
 8000b38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2201      	movs	r2, #1
 8000b50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	4a29      	ldr	r2, [pc, #164]	; (8000bfc <HAL_UART_MspInit+0x14c>)
 8000b56:	0019      	movs	r1, r3
 8000b58:	0010      	movs	r0, r2
 8000b5a:	f000 fa41 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5e:	e044      	b.n	8000bea <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a26      	ldr	r2, [pc, #152]	; (8000c00 <HAL_UART_MspInit+0x150>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d13f      	bne.n	8000bea <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b6a:	2118      	movs	r1, #24
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2202      	movs	r2, #2
 8000b70:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 f8dc 	bl	8001d38 <HAL_RCCEx_PeriphCLKConfig>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000b84:	f7ff ff44 	bl	8000a10 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	0289      	lsls	r1, r1, #10
 8000b92:	430a      	orrs	r2, r1
 8000b94:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	029b      	lsls	r3, r3, #10
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000baa:	2101      	movs	r1, #1
 8000bac:	430a      	orrs	r2, r1
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <HAL_UART_MspInit+0x148>)
 8000bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_STLK_Pin|USART2_RX_STLK_Pin;
 8000bbc:	214c      	movs	r1, #76	; 0x4c
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	220c      	movs	r2, #12
 8000bc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2201      	movs	r2, #1
 8000bce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2201      	movs	r2, #1
 8000bda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	187a      	adds	r2, r7, r1
 8000bde:	23a0      	movs	r3, #160	; 0xa0
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 f9fb 	bl	8000fe0 <HAL_GPIO_Init>
}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b019      	add	sp, #100	; 0x64
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	40013800 	.word	0x40013800
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000800 	.word	0x50000800
 8000c00:	40004400 	.word	0x40004400

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f8e0 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC1 and LPTIM1 interrupts (LPTIM1 interrupt through EXTI line 29).
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f001 fae8 	bl	8002210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	2000008c 	.word	0x2000008c

08000c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c54:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <_sbrk+0x5c>)
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <_sbrk+0x60>)
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <_sbrk+0x64>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <_sbrk+0x68>)
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	18d3      	adds	r3, r2, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d207      	bcs.n	8000c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c7c:	f002 fbb4 	bl	80033e8 <__errno>
 8000c80:	0003      	movs	r3, r0
 8000c82:	220c      	movs	r2, #12
 8000c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	425b      	negs	r3, r3
 8000c8a:	e009      	b.n	8000ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <_sbrk+0x64>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	18d2      	adds	r2, r2, r3
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <_sbrk+0x64>)
 8000c9c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b006      	add	sp, #24
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20009000 	.word	0x20009000
 8000cac:	00000400 	.word	0x00000400
 8000cb0:	20000204 	.word	0x20000204
 8000cb4:	20000220 	.word	0x20000220

08000cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc8:	f7ff fff6 	bl	8000cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	; (8000d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <LoopForever+0xe>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	; (8000d10 <LoopForever+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cf2:	f002 fb7f 	bl	80033f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cf6:	f7ff fca3 	bl	8000640 <main>

08000cfa <LoopForever>:

LoopForever:
  b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
  ldr   r0, =_estack
 8000cfc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d08:	08003e38 	.word	0x08003e38
  ldr r2, =_sbss
 8000d0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d10:	2000021c 	.word	0x2000021c

08000d14 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_COMP_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x3c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_Init+0x3c>)
 8000d2a:	2180      	movs	r1, #128	; 0x80
 8000d2c:	0049      	lsls	r1, r1, #1
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f810 	bl	8000d58 <HAL_InitTick>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e001      	b.n	8000d48 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff fe6a 	bl	8000a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40022000 	.word	0x40022000

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d60:	230f      	movs	r3, #15
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <HAL_InitTick+0x88>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d02b      	beq.n	8000dc8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_InitTick+0x8c>)
 8000d72:	681c      	ldr	r4, [r3, #0]
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <HAL_InitTick+0x88>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	0019      	movs	r1, r3
 8000d7a:	23fa      	movs	r3, #250	; 0xfa
 8000d7c:	0098      	lsls	r0, r3, #2
 8000d7e:	f7ff f9d3 	bl	8000128 <__udivsi3>
 8000d82:	0003      	movs	r3, r0
 8000d84:	0019      	movs	r1, r3
 8000d86:	0020      	movs	r0, r4
 8000d88:	f7ff f9ce 	bl	8000128 <__udivsi3>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 f919 	bl	8000fc6 <HAL_SYSTICK_Config>
 8000d94:	1e03      	subs	r3, r0, #0
 8000d96:	d112      	bne.n	8000dbe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d80a      	bhi.n	8000db4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	2200      	movs	r2, #0
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 f8e8 	bl	8000f7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_InitTick+0x90>)
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e00d      	b.n	8000dd0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000db4:	230f      	movs	r3, #15
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	e008      	b.n	8000dd0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e003      	b.n	8000dd0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	781b      	ldrb	r3, [r3, #0]
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b005      	add	sp, #20
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	001a      	movs	r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x20>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	18d2      	adds	r2, r2, r3
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_IncTick+0x20>)
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000208 	.word	0x20000208

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b02      	ldr	r3, [pc, #8]	; (8000e20 <HAL_GetTick+0x10>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	20000208 	.word	0x20000208

08000e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	1dfb      	adds	r3, r7, #7
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b7f      	cmp	r3, #127	; 0x7f
 8000e36:	d809      	bhi.n	8000e4c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e38:	1dfb      	adds	r3, r7, #7
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	231f      	movs	r3, #31
 8000e40:	401a      	ands	r2, r3
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <__NVIC_EnableIRQ+0x30>)
 8000e44:	2101      	movs	r1, #1
 8000e46:	4091      	lsls	r1, r2
 8000e48:	000a      	movs	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b002      	add	sp, #8
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	0002      	movs	r2, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e6c:	d828      	bhi.n	8000ec0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e6e:	4a2f      	ldr	r2, [pc, #188]	; (8000f2c <__NVIC_SetPriority+0xd4>)
 8000e70:	1dfb      	adds	r3, r7, #7
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	33c0      	adds	r3, #192	; 0xc0
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	589b      	ldr	r3, [r3, r2]
 8000e7e:	1dfa      	adds	r2, r7, #7
 8000e80:	7812      	ldrb	r2, [r2, #0]
 8000e82:	0011      	movs	r1, r2
 8000e84:	2203      	movs	r2, #3
 8000e86:	400a      	ands	r2, r1
 8000e88:	00d2      	lsls	r2, r2, #3
 8000e8a:	21ff      	movs	r1, #255	; 0xff
 8000e8c:	4091      	lsls	r1, r2
 8000e8e:	000a      	movs	r2, r1
 8000e90:	43d2      	mvns	r2, r2
 8000e92:	401a      	ands	r2, r3
 8000e94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	019b      	lsls	r3, r3, #6
 8000e9a:	22ff      	movs	r2, #255	; 0xff
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	4003      	ands	r3, r0
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eac:	481f      	ldr	r0, [pc, #124]	; (8000f2c <__NVIC_SetPriority+0xd4>)
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	33c0      	adds	r3, #192	; 0xc0
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ebe:	e031      	b.n	8000f24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <__NVIC_SetPriority+0xd8>)
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	0019      	movs	r1, r3
 8000ec8:	230f      	movs	r3, #15
 8000eca:	400b      	ands	r3, r1
 8000ecc:	3b08      	subs	r3, #8
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3306      	adds	r3, #6
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	18d3      	adds	r3, r2, r3
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	1dfa      	adds	r2, r7, #7
 8000edc:	7812      	ldrb	r2, [r2, #0]
 8000ede:	0011      	movs	r1, r2
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	400a      	ands	r2, r1
 8000ee4:	00d2      	lsls	r2, r2, #3
 8000ee6:	21ff      	movs	r1, #255	; 0xff
 8000ee8:	4091      	lsls	r1, r2
 8000eea:	000a      	movs	r2, r1
 8000eec:	43d2      	mvns	r2, r2
 8000eee:	401a      	ands	r2, r3
 8000ef0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	019b      	lsls	r3, r3, #6
 8000ef6:	22ff      	movs	r2, #255	; 0xff
 8000ef8:	401a      	ands	r2, r3
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	0018      	movs	r0, r3
 8000f00:	2303      	movs	r3, #3
 8000f02:	4003      	ands	r3, r0
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f08:	4809      	ldr	r0, [pc, #36]	; (8000f30 <__NVIC_SetPriority+0xd8>)
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	001c      	movs	r4, r3
 8000f10:	230f      	movs	r3, #15
 8000f12:	4023      	ands	r3, r4
 8000f14:	3b08      	subs	r3, #8
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	3306      	adds	r3, #6
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	18c3      	adds	r3, r0, r3
 8000f20:	3304      	adds	r3, #4
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b003      	add	sp, #12
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	1e5a      	subs	r2, r3, #1
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	045b      	lsls	r3, r3, #17
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d301      	bcc.n	8000f4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e010      	b.n	8000f6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	; (8000f78 <SysTick_Config+0x44>)
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	3a01      	subs	r2, #1
 8000f52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f54:	2301      	movs	r3, #1
 8000f56:	425b      	negs	r3, r3
 8000f58:	2103      	movs	r1, #3
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f7ff ff7c 	bl	8000e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <SysTick_Config+0x44>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f66:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <SysTick_Config+0x44>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	0018      	movs	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	e000e010 	.word	0xe000e010

08000f7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	210f      	movs	r1, #15
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	1c02      	adds	r2, r0, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	0011      	movs	r1, r2
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f7ff ff5d 	bl	8000e58 <__NVIC_SetPriority>
}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b004      	add	sp, #16
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	0002      	movs	r2, r0
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f7ff ff33 	bl	8000e24 <__NVIC_EnableIRQ>
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff ffaf 	bl	8000f34 <SysTick_Config>
 8000fd6:	0003      	movs	r3, r0
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b002      	add	sp, #8
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e147      	b.n	8001280 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4091      	lsls	r1, r2
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d100      	bne.n	8001008 <HAL_GPIO_Init+0x28>
 8001006:	e138      	b.n	800127a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2203      	movs	r2, #3
 800100e:	4013      	ands	r3, r2
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_GPIO_Init+0x40>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2203      	movs	r2, #3
 800101a:	4013      	ands	r3, r2
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	409a      	lsls	r2, r3
 800102e:	0013      	movs	r3, r2
 8001030:	43da      	mvns	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
 800105c:	0013      	movs	r3, r2
 800105e:	43da      	mvns	r2, r3
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	2201      	movs	r2, #1
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	2203      	movs	r2, #3
 8001088:	4013      	ands	r3, r2
 800108a:	2b03      	cmp	r3, #3
 800108c:	d017      	beq.n	80010be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	43da      	mvns	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2203      	movs	r2, #3
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d123      	bne.n	8001112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	58d3      	ldr	r3, [r2, r3]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2207      	movs	r2, #7
 80010dc:	4013      	ands	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	409a      	lsls	r2, r3
 80010e4:	0013      	movs	r3, r2
 80010e6:	43da      	mvns	r2, r3
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2107      	movs	r1, #7
 80010f6:	400b      	ands	r3, r1
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	409a      	lsls	r2, r3
 80010fc:	0013      	movs	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	6939      	ldr	r1, [r7, #16]
 8001110:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2203      	movs	r2, #3
 8001130:	401a      	ands	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	23c0      	movs	r3, #192	; 0xc0
 800114c:	029b      	lsls	r3, r3, #10
 800114e:	4013      	ands	r3, r2
 8001150:	d100      	bne.n	8001154 <HAL_GPIO_Init+0x174>
 8001152:	e092      	b.n	800127a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001154:	4a50      	ldr	r2, [pc, #320]	; (8001298 <HAL_GPIO_Init+0x2b8>)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3318      	adds	r3, #24
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	589b      	ldr	r3, [r3, r2]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	2203      	movs	r2, #3
 8001166:	4013      	ands	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	220f      	movs	r2, #15
 800116c:	409a      	lsls	r2, r3
 800116e:	0013      	movs	r3, r2
 8001170:	43da      	mvns	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	23a0      	movs	r3, #160	; 0xa0
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	429a      	cmp	r2, r3
 8001180:	d013      	beq.n	80011aa <HAL_GPIO_Init+0x1ca>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a45      	ldr	r2, [pc, #276]	; (800129c <HAL_GPIO_Init+0x2bc>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d00d      	beq.n	80011a6 <HAL_GPIO_Init+0x1c6>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a44      	ldr	r2, [pc, #272]	; (80012a0 <HAL_GPIO_Init+0x2c0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d007      	beq.n	80011a2 <HAL_GPIO_Init+0x1c2>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a43      	ldr	r2, [pc, #268]	; (80012a4 <HAL_GPIO_Init+0x2c4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_GPIO_Init+0x1be>
 800119a:	2303      	movs	r3, #3
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x1cc>
 800119e:	2305      	movs	r3, #5
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_Init+0x1cc>
 80011a2:	2302      	movs	r3, #2
 80011a4:	e002      	b.n	80011ac <HAL_GPIO_Init+0x1cc>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_Init+0x1cc>
 80011aa:	2300      	movs	r3, #0
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	2103      	movs	r1, #3
 80011b0:	400a      	ands	r2, r1
 80011b2:	00d2      	lsls	r2, r2, #3
 80011b4:	4093      	lsls	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011bc:	4936      	ldr	r1, [pc, #216]	; (8001298 <HAL_GPIO_Init+0x2b8>)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3318      	adds	r3, #24
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ca:	4b33      	ldr	r3, [pc, #204]	; (8001298 <HAL_GPIO_Init+0x2b8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	035b      	lsls	r3, r3, #13
 80011e2:	4013      	ands	r3, r2
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ee:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <HAL_GPIO_Init+0x2b8>)
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <HAL_GPIO_Init+0x2b8>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43da      	mvns	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	039b      	lsls	r3, r3, #14
 800120c:	4013      	ands	r3, r2
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <HAL_GPIO_Init+0x2b8>)
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800121e:	4a1e      	ldr	r2, [pc, #120]	; (8001298 <HAL_GPIO_Init+0x2b8>)
 8001220:	2384      	movs	r3, #132	; 0x84
 8001222:	58d3      	ldr	r3, [r2, r3]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43da      	mvns	r2, r3
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	029b      	lsls	r3, r3, #10
 8001238:	4013      	ands	r3, r2
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001244:	4914      	ldr	r1, [pc, #80]	; (8001298 <HAL_GPIO_Init+0x2b8>)
 8001246:	2284      	movs	r2, #132	; 0x84
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800124c:	4a12      	ldr	r2, [pc, #72]	; (8001298 <HAL_GPIO_Init+0x2b8>)
 800124e:	2380      	movs	r3, #128	; 0x80
 8001250:	58d3      	ldr	r3, [r2, r3]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43da      	mvns	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	025b      	lsls	r3, r3, #9
 8001266:	4013      	ands	r3, r2
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001272:	4909      	ldr	r1, [pc, #36]	; (8001298 <HAL_GPIO_Init+0x2b8>)
 8001274:	2280      	movs	r2, #128	; 0x80
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3301      	adds	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	40da      	lsrs	r2, r3
 8001288:	1e13      	subs	r3, r2, #0
 800128a:	d000      	beq.n	800128e <HAL_GPIO_Init+0x2ae>
 800128c:	e6b0      	b.n	8000ff0 <HAL_GPIO_Init+0x10>
  }
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b006      	add	sp, #24
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021800 	.word	0x40021800
 800129c:	50000400 	.word	0x50000400
 80012a0:	50000800 	.word	0x50000800
 80012a4:	50000c00 	.word	0x50000c00

080012a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	0008      	movs	r0, r1
 80012b2:	0011      	movs	r1, r2
 80012b4:	1cbb      	adds	r3, r7, #2
 80012b6:	1c02      	adds	r2, r0, #0
 80012b8:	801a      	strh	r2, [r3, #0]
 80012ba:	1c7b      	adds	r3, r7, #1
 80012bc:	1c0a      	adds	r2, r1, #0
 80012be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c0:	1c7b      	adds	r3, r7, #1
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d004      	beq.n	80012d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c8:	1cbb      	adds	r3, r7, #2
 80012ca:	881a      	ldrh	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d0:	e003      	b.n	80012da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d2:	1cbb      	adds	r3, r7, #2
 80012d4:	881a      	ldrh	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	46bd      	mov	sp, r7
 80012de:	b002      	add	sp, #8
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	000a      	movs	r2, r1
 80012ec:	1cbb      	adds	r3, r7, #2
 80012ee:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012f6:	1cbb      	adds	r3, r7, #2
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	041a      	lsls	r2, r3, #16
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	1cb9      	adds	r1, r7, #2
 8001306:	8809      	ldrh	r1, [r1, #0]
 8001308:	400b      	ands	r3, r1
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b004      	add	sp, #16
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001326:	4013      	ands	r3, r2
 8001328:	0019      	movs	r1, r3
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	429a      	cmp	r2, r3
 800133a:	d11f      	bne.n	800137c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	0013      	movs	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	189b      	adds	r3, r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4912      	ldr	r1, [pc, #72]	; (8001394 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800134a:	0018      	movs	r0, r3
 800134c:	f7fe feec 	bl	8000128 <__udivsi3>
 8001350:	0003      	movs	r3, r0
 8001352:	3301      	adds	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001356:	e008      	b.n	800136a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3b01      	subs	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	e001      	b.n	800136a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e009      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	401a      	ands	r2, r3
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	429a      	cmp	r2, r3
 800137a:	d0ed      	beq.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	0018      	movs	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	b004      	add	sp, #16
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	40007000 	.word	0x40007000
 800138c:	fffff9ff 	.word	0xfffff9ff
 8001390:	20000000 	.word	0x20000000
 8001394:	000f4240 	.word	0x000f4240

08001398 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	23e0      	movs	r3, #224	; 0xe0
 80013a2:	01db      	lsls	r3, r3, #7
 80013a4:	4013      	ands	r3, r2
}
 80013a6:	0018      	movs	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e2fe      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2201      	movs	r2, #1
 80013c8:	4013      	ands	r3, r2
 80013ca:	d100      	bne.n	80013ce <HAL_RCC_OscConfig+0x1e>
 80013cc:	e07c      	b.n	80014c8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ce:	4bc3      	ldr	r3, [pc, #780]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2238      	movs	r2, #56	; 0x38
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d8:	4bc0      	ldr	r3, [pc, #768]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2203      	movs	r2, #3
 80013de:	4013      	ands	r3, r2
 80013e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	2b10      	cmp	r3, #16
 80013e6:	d102      	bne.n	80013ee <HAL_RCC_OscConfig+0x3e>
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d002      	beq.n	80013f4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b08      	cmp	r3, #8
 80013f2:	d10b      	bne.n	800140c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f4:	4bb9      	ldr	r3, [pc, #740]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	029b      	lsls	r3, r3, #10
 80013fc:	4013      	ands	r3, r2
 80013fe:	d062      	beq.n	80014c6 <HAL_RCC_OscConfig+0x116>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d15e      	bne.n	80014c6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e2d9      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	025b      	lsls	r3, r3, #9
 8001414:	429a      	cmp	r2, r3
 8001416:	d107      	bne.n	8001428 <HAL_RCC_OscConfig+0x78>
 8001418:	4bb0      	ldr	r3, [pc, #704]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4baf      	ldr	r3, [pc, #700]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 800141e:	2180      	movs	r1, #128	; 0x80
 8001420:	0249      	lsls	r1, r1, #9
 8001422:	430a      	orrs	r2, r1
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	e020      	b.n	800146a <HAL_RCC_OscConfig+0xba>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	23a0      	movs	r3, #160	; 0xa0
 800142e:	02db      	lsls	r3, r3, #11
 8001430:	429a      	cmp	r2, r3
 8001432:	d10e      	bne.n	8001452 <HAL_RCC_OscConfig+0xa2>
 8001434:	4ba9      	ldr	r3, [pc, #676]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4ba8      	ldr	r3, [pc, #672]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 800143a:	2180      	movs	r1, #128	; 0x80
 800143c:	02c9      	lsls	r1, r1, #11
 800143e:	430a      	orrs	r2, r1
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	4ba6      	ldr	r3, [pc, #664]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4ba5      	ldr	r3, [pc, #660]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001448:	2180      	movs	r1, #128	; 0x80
 800144a:	0249      	lsls	r1, r1, #9
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e00b      	b.n	800146a <HAL_RCC_OscConfig+0xba>
 8001452:	4ba2      	ldr	r3, [pc, #648]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4ba1      	ldr	r3, [pc, #644]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001458:	49a1      	ldr	r1, [pc, #644]	; (80016e0 <HAL_RCC_OscConfig+0x330>)
 800145a:	400a      	ands	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	4b9f      	ldr	r3, [pc, #636]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b9e      	ldr	r3, [pc, #632]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001464:	499f      	ldr	r1, [pc, #636]	; (80016e4 <HAL_RCC_OscConfig+0x334>)
 8001466:	400a      	ands	r2, r1
 8001468:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d014      	beq.n	800149c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001472:	f7ff fccd 	bl	8000e10 <HAL_GetTick>
 8001476:	0003      	movs	r3, r0
 8001478:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fcc8 	bl	8000e10 <HAL_GetTick>
 8001480:	0002      	movs	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e298      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148e:	4b93      	ldr	r3, [pc, #588]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	029b      	lsls	r3, r3, #10
 8001496:	4013      	ands	r3, r2
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0xcc>
 800149a:	e015      	b.n	80014c8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149c:	f7ff fcb8 	bl	8000e10 <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a6:	f7ff fcb3 	bl	8000e10 <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b64      	cmp	r3, #100	; 0x64
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e283      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014b8:	4b88      	ldr	r3, [pc, #544]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	029b      	lsls	r3, r3, #10
 80014c0:	4013      	ands	r3, r2
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0xf6>
 80014c4:	e000      	b.n	80014c8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2202      	movs	r2, #2
 80014ce:	4013      	ands	r3, r2
 80014d0:	d100      	bne.n	80014d4 <HAL_RCC_OscConfig+0x124>
 80014d2:	e099      	b.n	8001608 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014d4:	4b81      	ldr	r3, [pc, #516]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2238      	movs	r2, #56	; 0x38
 80014da:	4013      	ands	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014de:	4b7f      	ldr	r3, [pc, #508]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2203      	movs	r2, #3
 80014e4:	4013      	ands	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b10      	cmp	r3, #16
 80014ec:	d102      	bne.n	80014f4 <HAL_RCC_OscConfig+0x144>
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d002      	beq.n	80014fa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d135      	bne.n	8001566 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014fa:	4b78      	ldr	r3, [pc, #480]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4013      	ands	r3, r2
 8001504:	d005      	beq.n	8001512 <HAL_RCC_OscConfig+0x162>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e256      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001512:	4b72      	ldr	r3, [pc, #456]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4a74      	ldr	r2, [pc, #464]	; (80016e8 <HAL_RCC_OscConfig+0x338>)
 8001518:	4013      	ands	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	021a      	lsls	r2, r3, #8
 8001522:	4b6e      	ldr	r3, [pc, #440]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001524:	430a      	orrs	r2, r1
 8001526:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d112      	bne.n	8001554 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800152e:	4b6b      	ldr	r3, [pc, #428]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a6e      	ldr	r2, [pc, #440]	; (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001534:	4013      	ands	r3, r2
 8001536:	0019      	movs	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	4b67      	ldr	r3, [pc, #412]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 800153e:	430a      	orrs	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001542:	4b66      	ldr	r3, [pc, #408]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	0adb      	lsrs	r3, r3, #11
 8001548:	2207      	movs	r2, #7
 800154a:	4013      	ands	r3, r2
 800154c:	4a68      	ldr	r2, [pc, #416]	; (80016f0 <HAL_RCC_OscConfig+0x340>)
 800154e:	40da      	lsrs	r2, r3
 8001550:	4b68      	ldr	r3, [pc, #416]	; (80016f4 <HAL_RCC_OscConfig+0x344>)
 8001552:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001554:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <HAL_RCC_OscConfig+0x348>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0018      	movs	r0, r3
 800155a:	f7ff fbfd 	bl	8000d58 <HAL_InitTick>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d051      	beq.n	8001606 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e22c      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d030      	beq.n	80015d0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800156e:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a5e      	ldr	r2, [pc, #376]	; (80016ec <HAL_RCC_OscConfig+0x33c>)
 8001574:	4013      	ands	r3, r2
 8001576:	0019      	movs	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	4b57      	ldr	r3, [pc, #348]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 800157e:	430a      	orrs	r2, r1
 8001580:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001582:	4b56      	ldr	r3, [pc, #344]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b55      	ldr	r3, [pc, #340]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	0049      	lsls	r1, r1, #1
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fc3e 	bl	8000e10 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159a:	f7ff fc39 	bl	8000e10 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e209      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ac:	4b4b      	ldr	r3, [pc, #300]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b8:	4b48      	ldr	r3, [pc, #288]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4a4a      	ldr	r2, [pc, #296]	; (80016e8 <HAL_RCC_OscConfig+0x338>)
 80015be:	4013      	ands	r3, r2
 80015c0:	0019      	movs	r1, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	021a      	lsls	r2, r3, #8
 80015c8:	4b44      	ldr	r3, [pc, #272]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80015ca:	430a      	orrs	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	e01b      	b.n	8001608 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80015d0:	4b42      	ldr	r3, [pc, #264]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b41      	ldr	r3, [pc, #260]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80015d6:	4949      	ldr	r1, [pc, #292]	; (80016fc <HAL_RCC_OscConfig+0x34c>)
 80015d8:	400a      	ands	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff fc18 	bl	8000e10 <HAL_GetTick>
 80015e0:	0003      	movs	r3, r0
 80015e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fc13 	bl	8000e10 <HAL_GetTick>
 80015ea:	0002      	movs	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e1e3      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f8:	4b38      	ldr	r3, [pc, #224]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4013      	ands	r3, r2
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x236>
 8001604:	e000      	b.n	8001608 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001606:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2208      	movs	r2, #8
 800160e:	4013      	ands	r3, r2
 8001610:	d047      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001612:	4b32      	ldr	r3, [pc, #200]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2238      	movs	r2, #56	; 0x38
 8001618:	4013      	ands	r3, r2
 800161a:	2b18      	cmp	r3, #24
 800161c:	d10a      	bne.n	8001634 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800161e:	4b2f      	ldr	r3, [pc, #188]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001622:	2202      	movs	r2, #2
 8001624:	4013      	ands	r3, r2
 8001626:	d03c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2f2>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d138      	bne.n	80016a2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e1c5      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d019      	beq.n	8001670 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 800163e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001640:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001642:	2101      	movs	r1, #1
 8001644:	430a      	orrs	r2, r1
 8001646:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff fbe2 	bl	8000e10 <HAL_GetTick>
 800164c:	0003      	movs	r3, r0
 800164e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fbdd 	bl	8000e10 <HAL_GetTick>
 8001656:	0002      	movs	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e1ad      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001664:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001668:	2202      	movs	r2, #2
 800166a:	4013      	ands	r3, r2
 800166c:	d0f1      	beq.n	8001652 <HAL_RCC_OscConfig+0x2a2>
 800166e:	e018      	b.n	80016a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001672:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 8001676:	2101      	movs	r1, #1
 8001678:	438a      	bics	r2, r1
 800167a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fbc8 	bl	8000e10 <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001686:	f7ff fbc3 	bl	8000e10 <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e193      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 800169a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169c:	2202      	movs	r2, #2
 800169e:	4013      	ands	r3, r2
 80016a0:	d1f1      	bne.n	8001686 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2204      	movs	r2, #4
 80016a8:	4013      	ands	r3, r2
 80016aa:	d100      	bne.n	80016ae <HAL_RCC_OscConfig+0x2fe>
 80016ac:	e0c6      	b.n	800183c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ae:	231f      	movs	r3, #31
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2238      	movs	r2, #56	; 0x38
 80016bc:	4013      	ands	r3, r2
 80016be:	2b20      	cmp	r3, #32
 80016c0:	d11e      	bne.n	8001700 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_RCC_OscConfig+0x32c>)
 80016c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c6:	2202      	movs	r2, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d100      	bne.n	80016ce <HAL_RCC_OscConfig+0x31e>
 80016cc:	e0b6      	b.n	800183c <HAL_RCC_OscConfig+0x48c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d000      	beq.n	80016d8 <HAL_RCC_OscConfig+0x328>
 80016d6:	e0b1      	b.n	800183c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e171      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
 80016dc:	40021000 	.word	0x40021000
 80016e0:	fffeffff 	.word	0xfffeffff
 80016e4:	fffbffff 	.word	0xfffbffff
 80016e8:	ffff80ff 	.word	0xffff80ff
 80016ec:	ffffc7ff 	.word	0xffffc7ff
 80016f0:	00f42400 	.word	0x00f42400
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000004 	.word	0x20000004
 80016fc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001700:	4bb1      	ldr	r3, [pc, #708]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	055b      	lsls	r3, r3, #21
 8001708:	4013      	ands	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_RCC_OscConfig+0x360>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x362>
 8001710:	2300      	movs	r3, #0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d011      	beq.n	800173a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	4bac      	ldr	r3, [pc, #688]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800171a:	4bab      	ldr	r3, [pc, #684]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	0549      	lsls	r1, r1, #21
 8001720:	430a      	orrs	r2, r1
 8001722:	63da      	str	r2, [r3, #60]	; 0x3c
 8001724:	4ba8      	ldr	r3, [pc, #672]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	055b      	lsls	r3, r3, #21
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001732:	231f      	movs	r3, #31
 8001734:	18fb      	adds	r3, r7, r3
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173a:	4ba4      	ldr	r3, [pc, #656]	; (80019cc <HAL_RCC_OscConfig+0x61c>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4013      	ands	r3, r2
 8001744:	d11a      	bne.n	800177c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001746:	4ba1      	ldr	r3, [pc, #644]	; (80019cc <HAL_RCC_OscConfig+0x61c>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4ba0      	ldr	r3, [pc, #640]	; (80019cc <HAL_RCC_OscConfig+0x61c>)
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	0049      	lsls	r1, r1, #1
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001754:	f7ff fb5c 	bl	8000e10 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800175e:	f7ff fb57 	bl	8000e10 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e127      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001770:	4b96      	ldr	r3, [pc, #600]	; (80019cc <HAL_RCC_OscConfig+0x61c>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4013      	ands	r3, r2
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x3e2>
 8001784:	4b90      	ldr	r3, [pc, #576]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001786:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001788:	4b8f      	ldr	r3, [pc, #572]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 800178a:	2101      	movs	r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001790:	e01c      	b.n	80017cc <HAL_RCC_OscConfig+0x41c>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x404>
 800179a:	4b8b      	ldr	r3, [pc, #556]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 800179c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800179e:	4b8a      	ldr	r3, [pc, #552]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80017a0:	2104      	movs	r1, #4
 80017a2:	430a      	orrs	r2, r1
 80017a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80017a6:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80017a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017aa:	4b87      	ldr	r3, [pc, #540]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80017ac:	2101      	movs	r1, #1
 80017ae:	430a      	orrs	r2, r1
 80017b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0x41c>
 80017b4:	4b84      	ldr	r3, [pc, #528]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80017b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017b8:	4b83      	ldr	r3, [pc, #524]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80017ba:	2101      	movs	r1, #1
 80017bc:	438a      	bics	r2, r1
 80017be:	65da      	str	r2, [r3, #92]	; 0x5c
 80017c0:	4b81      	ldr	r3, [pc, #516]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80017c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017c4:	4b80      	ldr	r3, [pc, #512]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80017c6:	2104      	movs	r1, #4
 80017c8:	438a      	bics	r2, r1
 80017ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d014      	beq.n	80017fe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb1c 	bl	8000e10 <HAL_GetTick>
 80017d8:	0003      	movs	r3, r0
 80017da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017dc:	e009      	b.n	80017f2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff fb17 	bl	8000e10 <HAL_GetTick>
 80017e2:	0002      	movs	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	4a79      	ldr	r2, [pc, #484]	; (80019d0 <HAL_RCC_OscConfig+0x620>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e0e6      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f2:	4b75      	ldr	r3, [pc, #468]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80017f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f6:	2202      	movs	r2, #2
 80017f8:	4013      	ands	r3, r2
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x42e>
 80017fc:	e013      	b.n	8001826 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fe:	f7ff fb07 	bl	8000e10 <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001806:	e009      	b.n	800181c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7ff fb02 	bl	8000e10 <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	4a6f      	ldr	r2, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0x620>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e0d1      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800181c:	4b6a      	ldr	r3, [pc, #424]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 800181e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001820:	2202      	movs	r2, #2
 8001822:	4013      	ands	r3, r2
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001826:	231f      	movs	r3, #31
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b65      	ldr	r3, [pc, #404]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001834:	4b64      	ldr	r3, [pc, #400]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001836:	4967      	ldr	r1, [pc, #412]	; (80019d4 <HAL_RCC_OscConfig+0x624>)
 8001838:	400a      	ands	r2, r1
 800183a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d100      	bne.n	8001846 <HAL_RCC_OscConfig+0x496>
 8001844:	e0bb      	b.n	80019be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001846:	4b60      	ldr	r3, [pc, #384]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2238      	movs	r2, #56	; 0x38
 800184c:	4013      	ands	r3, r2
 800184e:	2b10      	cmp	r3, #16
 8001850:	d100      	bne.n	8001854 <HAL_RCC_OscConfig+0x4a4>
 8001852:	e07b      	b.n	800194c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d156      	bne.n	800190a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185c:	4b5a      	ldr	r3, [pc, #360]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b59      	ldr	r3, [pc, #356]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001862:	495d      	ldr	r1, [pc, #372]	; (80019d8 <HAL_RCC_OscConfig+0x628>)
 8001864:	400a      	ands	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fad2 	bl	8000e10 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff facd 	bl	8000e10 <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e09d      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001884:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	049b      	lsls	r3, r3, #18
 800188c:	4013      	ands	r3, r2
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001890:	4b4d      	ldr	r3, [pc, #308]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4a51      	ldr	r2, [pc, #324]	; (80019dc <HAL_RCC_OscConfig+0x62c>)
 8001896:	4013      	ands	r3, r2
 8001898:	0019      	movs	r1, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1a      	ldr	r2, [r3, #32]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018bc:	431a      	orrs	r2, r3
 80018be:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80018c0:	430a      	orrs	r2, r1
 80018c2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b40      	ldr	r3, [pc, #256]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0449      	lsls	r1, r1, #17
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80018d2:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	0549      	lsls	r1, r1, #21
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fa96 	bl	8000e10 <HAL_GetTick>
 80018e4:	0003      	movs	r3, r0
 80018e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff fa91 	bl	8000e10 <HAL_GetTick>
 80018ee:	0002      	movs	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e061      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018fc:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	049b      	lsls	r3, r3, #18
 8001904:	4013      	ands	r3, r2
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x53a>
 8001908:	e059      	b.n	80019be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001910:	4931      	ldr	r1, [pc, #196]	; (80019d8 <HAL_RCC_OscConfig+0x628>)
 8001912:	400a      	ands	r2, r1
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff fa7b 	bl	8000e10 <HAL_GetTick>
 800191a:	0003      	movs	r3, r0
 800191c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff fa76 	bl	8000e10 <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e046      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	049b      	lsls	r3, r3, #18
 800193a:	4013      	ands	r3, r2
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 8001944:	4926      	ldr	r1, [pc, #152]	; (80019e0 <HAL_RCC_OscConfig+0x630>)
 8001946:	400a      	ands	r2, r1
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	e038      	b.n	80019be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e033      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_RCC_OscConfig+0x618>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2203      	movs	r2, #3
 8001962:	401a      	ands	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	429a      	cmp	r2, r3
 800196a:	d126      	bne.n	80019ba <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2270      	movs	r2, #112	; 0x70
 8001970:	401a      	ands	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d11f      	bne.n	80019ba <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	23fe      	movs	r3, #254	; 0xfe
 800197e:	01db      	lsls	r3, r3, #7
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d116      	bne.n	80019ba <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	23f8      	movs	r3, #248	; 0xf8
 8001990:	039b      	lsls	r3, r3, #14
 8001992:	401a      	ands	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d10e      	bne.n	80019ba <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	23e0      	movs	r3, #224	; 0xe0
 80019a0:	051b      	lsls	r3, r3, #20
 80019a2:	401a      	ands	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	0f5b      	lsrs	r3, r3, #29
 80019b0:	075a      	lsls	r2, r3, #29
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d001      	beq.n	80019be <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b008      	add	sp, #32
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40007000 	.word	0x40007000
 80019d0:	00001388 	.word	0x00001388
 80019d4:	efffffff 	.word	0xefffffff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	11c1808c 	.word	0x11c1808c
 80019e0:	eefefffc 	.word	0xeefefffc

080019e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0e9      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f8:	4b76      	ldr	r3, [pc, #472]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2207      	movs	r2, #7
 80019fe:	4013      	ands	r3, r2
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d91e      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b73      	ldr	r3, [pc, #460]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2207      	movs	r2, #7
 8001a0c:	4393      	bics	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a18:	f7ff f9fa 	bl	8000e10 <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a20:	e009      	b.n	8001a36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a22:	f7ff f9f5 	bl	8000e10 <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	4a6a      	ldr	r2, [pc, #424]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f4>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e0ca      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a36:	4b67      	ldr	r3, [pc, #412]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1ee      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d015      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2204      	movs	r2, #4
 8001a54:	4013      	ands	r3, r2
 8001a56:	d006      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a58:	4b60      	ldr	r3, [pc, #384]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4b5f      	ldr	r3, [pc, #380]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001a5e:	21e0      	movs	r1, #224	; 0xe0
 8001a60:	01c9      	lsls	r1, r1, #7
 8001a62:	430a      	orrs	r2, r1
 8001a64:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a66:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	4a5d      	ldr	r2, [pc, #372]	; (8001be0 <HAL_RCC_ClockConfig+0x1fc>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4013      	ands	r3, r2
 8001a82:	d057      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a8c:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	029b      	lsls	r3, r3, #10
 8001a94:	4013      	ands	r3, r2
 8001a96:	d12b      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e097      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d107      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa4:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	049b      	lsls	r3, r3, #18
 8001aac:	4013      	ands	r3, r2
 8001aae:	d11f      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e08b      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001abc:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d113      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e07f      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad4:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad8:	2202      	movs	r2, #2
 8001ada:	4013      	ands	r3, r2
 8001adc:	d108      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e074      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae2:	4b3e      	ldr	r3, [pc, #248]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e06d      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001af0:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2207      	movs	r2, #7
 8001af6:	4393      	bics	r3, r2
 8001af8:	0019      	movs	r1, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001b00:	430a      	orrs	r2, r1
 8001b02:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b04:	f7ff f984 	bl	8000e10 <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0c:	e009      	b.n	8001b22 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0e:	f7ff f97f 	bl	8000e10 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	4a2f      	ldr	r2, [pc, #188]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e054      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	4b2e      	ldr	r3, [pc, #184]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2238      	movs	r2, #56	; 0x38
 8001b28:	401a      	ands	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d1ec      	bne.n	8001b0e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b34:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2207      	movs	r2, #7
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d21e      	bcs.n	8001b80 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2207      	movs	r2, #7
 8001b48:	4393      	bics	r3, r2
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b54:	f7ff f95c 	bl	8000e10 <HAL_GetTick>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b5c:	e009      	b.n	8001b72 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b5e:	f7ff f957 	bl	8000e10 <HAL_GetTick>
 8001b62:	0002      	movs	r2, r0
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e02c      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2207      	movs	r2, #7
 8001b78:	4013      	ands	r3, r2
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1ee      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2204      	movs	r2, #4
 8001b86:	4013      	ands	r3, r2
 8001b88:	d009      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <HAL_RCC_ClockConfig+0x200>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b9e:	f000 f829 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8001ba2:	0001      	movs	r1, r0
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	220f      	movs	r2, #15
 8001bac:	401a      	ands	r2, r3
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_RCC_ClockConfig+0x204>)
 8001bb0:	0092      	lsls	r2, r2, #2
 8001bb2:	58d3      	ldr	r3, [r2, r3]
 8001bb4:	221f      	movs	r2, #31
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	000a      	movs	r2, r1
 8001bba:	40da      	lsrs	r2, r3
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_RCC_ClockConfig+0x208>)
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_ClockConfig+0x20c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff f8c7 	bl	8000d58 <HAL_InitTick>
 8001bca:	0003      	movs	r3, r0
}
 8001bcc:	0018      	movs	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b004      	add	sp, #16
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40022000 	.word	0x40022000
 8001bd8:	00001388 	.word	0x00001388
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	fffff0ff 	.word	0xfffff0ff
 8001be4:	ffff8fff 	.word	0xffff8fff
 8001be8:	08003d6c 	.word	0x08003d6c
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bfa:	4b3c      	ldr	r3, [pc, #240]	; (8001cec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2238      	movs	r2, #56	; 0x38
 8001c00:	4013      	ands	r3, r2
 8001c02:	d10f      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c04:	4b39      	ldr	r3, [pc, #228]	; (8001cec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0adb      	lsrs	r3, r3, #11
 8001c0a:	2207      	movs	r2, #7
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2201      	movs	r2, #1
 8001c10:	409a      	lsls	r2, r3
 8001c12:	0013      	movs	r3, r2
 8001c14:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c16:	6839      	ldr	r1, [r7, #0]
 8001c18:	4835      	ldr	r0, [pc, #212]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c1a:	f7fe fa85 	bl	8000128 <__udivsi3>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e05d      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2238      	movs	r2, #56	; 0x38
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d102      	bne.n	8001c36 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c30:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	e054      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2238      	movs	r2, #56	; 0x38
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b10      	cmp	r3, #16
 8001c40:	d138      	bne.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c42:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2203      	movs	r2, #3
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	2207      	movs	r2, #7
 8001c54:	4013      	ands	r3, r2
 8001c56:	3301      	adds	r3, #1
 8001c58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d10d      	bne.n	8001c7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	4824      	ldr	r0, [pc, #144]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c64:	f7fe fa60 	bl	8000128 <__udivsi3>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	227f      	movs	r2, #127	; 0x7f
 8001c74:	4013      	ands	r3, r2
 8001c76:	434b      	muls	r3, r1
 8001c78:	617b      	str	r3, [r7, #20]
        break;
 8001c7a:	e00d      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	481c      	ldr	r0, [pc, #112]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c80:	f7fe fa52 	bl	8000128 <__udivsi3>
 8001c84:	0003      	movs	r3, r0
 8001c86:	0019      	movs	r1, r3
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	227f      	movs	r2, #127	; 0x7f
 8001c90:	4013      	ands	r3, r2
 8001c92:	434b      	muls	r3, r1
 8001c94:	617b      	str	r3, [r7, #20]
        break;
 8001c96:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0f5b      	lsrs	r3, r3, #29
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	6978      	ldr	r0, [r7, #20]
 8001caa:	f7fe fa3d 	bl	8000128 <__udivsi3>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	e015      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2238      	movs	r2, #56	; 0x38
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	d103      	bne.n	8001cc8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	e00b      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cc8:	4b08      	ldr	r3, [pc, #32]	; (8001cec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2238      	movs	r2, #56	; 0x38
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b18      	cmp	r3, #24
 8001cd2:	d103      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001cd4:	23fa      	movs	r3, #250	; 0xfa
 8001cd6:	01db      	lsls	r3, r3, #7
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	e001      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ce0:	693b      	ldr	r3, [r7, #16]
}
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b006      	add	sp, #24
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	00f42400 	.word	0x00f42400
 8001cf4:	007a1200 	.word	0x007a1200

08001cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cfc:	4b02      	ldr	r3, [pc, #8]	; (8001d08 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	20000000 	.word	0x20000000

08001d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d0c:	b5b0      	push	{r4, r5, r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d10:	f7ff fff2 	bl	8001cf8 <HAL_RCC_GetHCLKFreq>
 8001d14:	0004      	movs	r4, r0
 8001d16:	f7ff fb3f 	bl	8001398 <LL_RCC_GetAPB1Prescaler>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	0b1a      	lsrs	r2, r3, #12
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d20:	0092      	lsls	r2, r2, #2
 8001d22:	58d3      	ldr	r3, [r2, r3]
 8001d24:	221f      	movs	r2, #31
 8001d26:	4013      	ands	r3, r2
 8001d28:	40dc      	lsrs	r4, r3
 8001d2a:	0023      	movs	r3, r4
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bdb0      	pop	{r4, r5, r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	08003dac 	.word	0x08003dac

08001d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d40:	2313      	movs	r3, #19
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d48:	2312      	movs	r3, #18
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	029b      	lsls	r3, r3, #10
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d100      	bne.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d5c:	e0a3      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5e:	2011      	movs	r0, #17
 8001d60:	183b      	adds	r3, r7, r0
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d66:	4bc3      	ldr	r3, [pc, #780]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d6a:	2380      	movs	r3, #128	; 0x80
 8001d6c:	055b      	lsls	r3, r3, #21
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d110      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4bc0      	ldr	r3, [pc, #768]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d76:	4bbf      	ldr	r3, [pc, #764]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	0549      	lsls	r1, r1, #21
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d80:	4bbc      	ldr	r3, [pc, #752]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	055b      	lsls	r3, r3, #21
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8e:	183b      	adds	r3, r7, r0
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d94:	4bb8      	ldr	r3, [pc, #736]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4bb7      	ldr	r3, [pc, #732]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	0049      	lsls	r1, r1, #1
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001da2:	f7ff f835 	bl	8000e10 <HAL_GetTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dac:	f7ff f830 	bl	8000e10 <HAL_GetTick>
 8001db0:	0002      	movs	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d904      	bls.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001dba:	2313      	movs	r3, #19
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	701a      	strb	r2, [r3, #0]
        break;
 8001dc2:	e005      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dc4:	4bac      	ldr	r3, [pc, #688]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d0ed      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001dd0:	2313      	movs	r3, #19
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d154      	bne.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dda:	4ba6      	ldr	r3, [pc, #664]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ddc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dde:	23c0      	movs	r3, #192	; 0xc0
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4013      	ands	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d019      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d014      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001df6:	4b9f      	ldr	r3, [pc, #636]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	4aa0      	ldr	r2, [pc, #640]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e00:	4b9c      	ldr	r3, [pc, #624]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e04:	4b9b      	ldr	r3, [pc, #620]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e06:	2180      	movs	r1, #128	; 0x80
 8001e08:	0249      	lsls	r1, r1, #9
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e0e:	4b99      	ldr	r3, [pc, #612]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e12:	4b98      	ldr	r3, [pc, #608]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e14:	499a      	ldr	r1, [pc, #616]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001e16:	400a      	ands	r2, r1
 8001e18:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e1a:	4b96      	ldr	r3, [pc, #600]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2201      	movs	r2, #1
 8001e24:	4013      	ands	r3, r2
 8001e26:	d016      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7fe fff2 	bl	8000e10 <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e30:	e00c      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7fe ffed 	bl	8000e10 <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	4a91      	ldr	r2, [pc, #580]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d904      	bls.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e42:	2313      	movs	r3, #19
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	2203      	movs	r2, #3
 8001e48:	701a      	strb	r2, [r3, #0]
            break;
 8001e4a:	e004      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e4c:	4b89      	ldr	r3, [pc, #548]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	2202      	movs	r2, #2
 8001e52:	4013      	ands	r3, r2
 8001e54:	d0ed      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e56:	2313      	movs	r3, #19
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10a      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e60:	4b84      	ldr	r3, [pc, #528]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	4a85      	ldr	r2, [pc, #532]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e6e:	4b81      	ldr	r3, [pc, #516]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e74:	e00c      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e76:	2312      	movs	r3, #18
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	2213      	movs	r2, #19
 8001e7c:	18ba      	adds	r2, r7, r2
 8001e7e:	7812      	ldrb	r2, [r2, #0]
 8001e80:	701a      	strb	r2, [r3, #0]
 8001e82:	e005      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e84:	2312      	movs	r3, #18
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	2213      	movs	r2, #19
 8001e8a:	18ba      	adds	r2, r7, r2
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e90:	2311      	movs	r3, #17
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d105      	bne.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b76      	ldr	r3, [pc, #472]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e9e:	4b75      	ldr	r3, [pc, #468]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ea0:	4979      	ldr	r1, [pc, #484]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001ea2:	400a      	ands	r2, r1
 8001ea4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4013      	ands	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eb0:	4b70      	ldr	r3, [pc, #448]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	4393      	bics	r3, r2
 8001eb8:	0019      	movs	r1, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	4b6d      	ldr	r3, [pc, #436]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2202      	movs	r2, #2
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d009      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ece:	4b69      	ldr	r3, [pc, #420]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	4393      	bics	r3, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	4b65      	ldr	r3, [pc, #404]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2210      	movs	r2, #16
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d009      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001eec:	4b61      	ldr	r3, [pc, #388]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	4a66      	ldr	r2, [pc, #408]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	4b5e      	ldr	r3, [pc, #376]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001efc:	430a      	orrs	r2, r1
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d009      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f0c:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	4a5f      	ldr	r2, [pc, #380]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	4b56      	ldr	r3, [pc, #344]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d009      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f2c:	4b51      	ldr	r3, [pc, #324]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f30:	4a58      	ldr	r2, [pc, #352]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	4b4e      	ldr	r3, [pc, #312]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2220      	movs	r2, #32
 8001f46:	4013      	ands	r3, r2
 8001f48:	d009      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	01db      	lsls	r3, r3, #7
 8001f66:	4013      	ands	r3, r2
 8001f68:	d015      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f6a:	4b42      	ldr	r3, [pc, #264]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	0899      	lsrs	r1, r3, #2
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1a      	ldr	r2, [r3, #32]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	05db      	lsls	r3, r3, #23
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d106      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f88:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	0249      	lsls	r1, r1, #9
 8001f92:	430a      	orrs	r2, r1
 8001f94:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	031b      	lsls	r3, r3, #12
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d009      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fa2:	4b34      	ldr	r3, [pc, #208]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	2240      	movs	r2, #64	; 0x40
 8001fa8:	4393      	bics	r3, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb0:	4b30      	ldr	r3, [pc, #192]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	039b      	lsls	r3, r3, #14
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d016      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001fc2:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc6:	4a35      	ldr	r2, [pc, #212]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fd0:	4b28      	ldr	r3, [pc, #160]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	03db      	lsls	r3, r3, #15
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d106      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001fe8:	2180      	movs	r1, #128	; 0x80
 8001fea:	0449      	lsls	r1, r1, #17
 8001fec:	430a      	orrs	r2, r1
 8001fee:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	; 0x80
 8001ff6:	03db      	lsls	r3, r3, #15
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d016      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	4a27      	ldr	r2, [pc, #156]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002002:	4013      	ands	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800200c:	430a      	orrs	r2, r1
 800200e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	045b      	lsls	r3, r3, #17
 8002018:	429a      	cmp	r2, r3
 800201a:	d106      	bne.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	0449      	lsls	r1, r1, #17
 8002026:	430a      	orrs	r2, r1
 8002028:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4013      	ands	r3, r2
 8002034:	d016      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800203c:	4013      	ands	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002046:	430a      	orrs	r2, r1
 8002048:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695a      	ldr	r2, [r3, #20]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	01db      	lsls	r3, r3, #7
 8002052:	429a      	cmp	r2, r3
 8002054:	d106      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	0249      	lsls	r1, r1, #9
 8002060:	430a      	orrs	r2, r1
 8002062:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002064:	2312      	movs	r3, #18
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	781b      	ldrb	r3, [r3, #0]
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b006      	add	sp, #24
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	40021000 	.word	0x40021000
 8002078:	40007000 	.word	0x40007000
 800207c:	fffffcff 	.word	0xfffffcff
 8002080:	fffeffff 	.word	0xfffeffff
 8002084:	00001388 	.word	0x00001388
 8002088:	efffffff 	.word	0xefffffff
 800208c:	fffff3ff 	.word	0xfffff3ff
 8002090:	fff3ffff 	.word	0xfff3ffff
 8002094:	ffcfffff 	.word	0xffcfffff
 8002098:	ffffcfff 	.word	0xffffcfff
 800209c:	ffbfffff 	.word	0xffbfffff
 80020a0:	feffffff 	.word	0xfeffffff
 80020a4:	ffff3fff 	.word	0xffff3fff

080020a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e04a      	b.n	8002150 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	223d      	movs	r2, #61	; 0x3d
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	223c      	movs	r2, #60	; 0x3c
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7fe fcc7 	bl	8000a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	223d      	movs	r2, #61	; 0x3d
 80020da:	2102      	movs	r1, #2
 80020dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3304      	adds	r3, #4
 80020e6:	0019      	movs	r1, r3
 80020e8:	0010      	movs	r0, r2
 80020ea:	f000 f9e3 	bl	80024b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2248      	movs	r2, #72	; 0x48
 80020f2:	2101      	movs	r1, #1
 80020f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	223e      	movs	r2, #62	; 0x3e
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	223f      	movs	r2, #63	; 0x3f
 8002102:	2101      	movs	r1, #1
 8002104:	5499      	strb	r1, [r3, r2]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2240      	movs	r2, #64	; 0x40
 800210a:	2101      	movs	r1, #1
 800210c:	5499      	strb	r1, [r3, r2]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2241      	movs	r2, #65	; 0x41
 8002112:	2101      	movs	r1, #1
 8002114:	5499      	strb	r1, [r3, r2]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2242      	movs	r2, #66	; 0x42
 800211a:	2101      	movs	r1, #1
 800211c:	5499      	strb	r1, [r3, r2]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2243      	movs	r2, #67	; 0x43
 8002122:	2101      	movs	r1, #1
 8002124:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2244      	movs	r2, #68	; 0x44
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2245      	movs	r2, #69	; 0x45
 8002132:	2101      	movs	r1, #1
 8002134:	5499      	strb	r1, [r3, r2]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2246      	movs	r2, #70	; 0x46
 800213a:	2101      	movs	r1, #1
 800213c:	5499      	strb	r1, [r3, r2]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2247      	movs	r2, #71	; 0x47
 8002142:	2101      	movs	r1, #1
 8002144:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	223d      	movs	r2, #61	; 0x3d
 800214a:	2101      	movs	r1, #1
 800214c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	0018      	movs	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	b002      	add	sp, #8
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	223d      	movs	r2, #61	; 0x3d
 8002164:	5c9b      	ldrb	r3, [r3, r2]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d001      	beq.n	8002170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e042      	b.n	80021f6 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	223d      	movs	r2, #61	; 0x3d
 8002174:	2102      	movs	r1, #2
 8002176:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2101      	movs	r1, #1
 8002184:	430a      	orrs	r2, r1
 8002186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a1c      	ldr	r2, [pc, #112]	; (8002200 <HAL_TIM_Base_Start_IT+0xa8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00f      	beq.n	80021b2 <HAL_TIM_Base_Start_IT+0x5a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	05db      	lsls	r3, r3, #23
 800219a:	429a      	cmp	r2, r3
 800219c:	d009      	beq.n	80021b2 <HAL_TIM_Base_Start_IT+0x5a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a18      	ldr	r2, [pc, #96]	; (8002204 <HAL_TIM_Base_Start_IT+0xac>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d004      	beq.n	80021b2 <HAL_TIM_Base_Start_IT+0x5a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a16      	ldr	r2, [pc, #88]	; (8002208 <HAL_TIM_Base_Start_IT+0xb0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d116      	bne.n	80021e0 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <HAL_TIM_Base_Start_IT+0xb4>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b06      	cmp	r3, #6
 80021c2:	d016      	beq.n	80021f2 <HAL_TIM_Base_Start_IT+0x9a>
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	025b      	lsls	r3, r3, #9
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d011      	beq.n	80021f2 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021de:	e008      	b.n	80021f2 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2101      	movs	r1, #1
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e000      	b.n	80021f4 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b004      	add	sp, #16
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	40012c00 	.word	0x40012c00
 8002204:	40000400 	.word	0x40000400
 8002208:	40014000 	.word	0x40014000
 800220c:	00010007 	.word	0x00010007

08002210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2202      	movs	r2, #2
 8002220:	4013      	ands	r3, r2
 8002222:	2b02      	cmp	r3, #2
 8002224:	d124      	bne.n	8002270 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2202      	movs	r2, #2
 800222e:	4013      	ands	r3, r2
 8002230:	2b02      	cmp	r3, #2
 8002232:	d11d      	bne.n	8002270 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2203      	movs	r2, #3
 800223a:	4252      	negs	r2, r2
 800223c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2203      	movs	r2, #3
 800224c:	4013      	ands	r3, r2
 800224e:	d004      	beq.n	800225a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	0018      	movs	r0, r3
 8002254:	f000 f916 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 8002258:	e007      	b.n	800226a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f000 f909 	bl	8002474 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f000 f915 	bl	8002494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2204      	movs	r2, #4
 8002278:	4013      	ands	r3, r2
 800227a:	2b04      	cmp	r3, #4
 800227c:	d125      	bne.n	80022ca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2204      	movs	r2, #4
 8002286:	4013      	ands	r3, r2
 8002288:	2b04      	cmp	r3, #4
 800228a:	d11e      	bne.n	80022ca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2205      	movs	r2, #5
 8002292:	4252      	negs	r2, r2
 8002294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2202      	movs	r2, #2
 800229a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	699a      	ldr	r2, [r3, #24]
 80022a2:	23c0      	movs	r3, #192	; 0xc0
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4013      	ands	r3, r2
 80022a8:	d004      	beq.n	80022b4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f000 f8e9 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 80022b2:	e007      	b.n	80022c4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 f8dc 	bl	8002474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	0018      	movs	r0, r3
 80022c0:	f000 f8e8 	bl	8002494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2208      	movs	r2, #8
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d124      	bne.n	8002322 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2208      	movs	r2, #8
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d11d      	bne.n	8002322 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2209      	movs	r2, #9
 80022ec:	4252      	negs	r2, r2
 80022ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2204      	movs	r2, #4
 80022f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	2203      	movs	r2, #3
 80022fe:	4013      	ands	r3, r2
 8002300:	d004      	beq.n	800230c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f000 f8bd 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 800230a:	e007      	b.n	800231c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	0018      	movs	r0, r3
 8002310:	f000 f8b0 	bl	8002474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	0018      	movs	r0, r3
 8002318:	f000 f8bc 	bl	8002494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2210      	movs	r2, #16
 800232a:	4013      	ands	r3, r2
 800232c:	2b10      	cmp	r3, #16
 800232e:	d125      	bne.n	800237c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	2210      	movs	r2, #16
 8002338:	4013      	ands	r3, r2
 800233a:	2b10      	cmp	r3, #16
 800233c:	d11e      	bne.n	800237c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2211      	movs	r2, #17
 8002344:	4252      	negs	r2, r2
 8002346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2208      	movs	r2, #8
 800234c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	23c0      	movs	r3, #192	; 0xc0
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4013      	ands	r3, r2
 800235a:	d004      	beq.n	8002366 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	0018      	movs	r0, r3
 8002360:	f000 f890 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 8002364:	e007      	b.n	8002376 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	0018      	movs	r0, r3
 800236a:	f000 f883 	bl	8002474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 f88f 	bl	8002494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2201      	movs	r2, #1
 8002384:	4013      	ands	r3, r2
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10f      	bne.n	80023aa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	2b01      	cmp	r3, #1
 8002396:	d108      	bne.n	80023aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2202      	movs	r2, #2
 800239e:	4252      	negs	r2, r2
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f7fe faf7 	bl	8000998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b80      	cmp	r3, #128	; 0x80
 80023b6:	d10f      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b80      	cmp	r3, #128	; 0x80
 80023c4:	d108      	bne.n	80023d8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2281      	movs	r2, #129	; 0x81
 80023cc:	4252      	negs	r2, r2
 80023ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	0018      	movs	r0, r3
 80023d4:	f000 f964 	bl	80026a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	401a      	ands	r2, r3
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d10e      	bne.n	800240a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2280      	movs	r2, #128	; 0x80
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b80      	cmp	r3, #128	; 0x80
 80023f8:	d107      	bne.n	800240a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_TIM_IRQHandler+0x260>)
 8002400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	0018      	movs	r0, r3
 8002406:	f000 f953 	bl	80026b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2240      	movs	r2, #64	; 0x40
 8002412:	4013      	ands	r3, r2
 8002414:	2b40      	cmp	r3, #64	; 0x40
 8002416:	d10f      	bne.n	8002438 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2240      	movs	r2, #64	; 0x40
 8002420:	4013      	ands	r3, r2
 8002422:	2b40      	cmp	r3, #64	; 0x40
 8002424:	d108      	bne.n	8002438 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2241      	movs	r2, #65	; 0x41
 800242c:	4252      	negs	r2, r2
 800242e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	0018      	movs	r0, r3
 8002434:	f000 f836 	bl	80024a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2220      	movs	r2, #32
 8002440:	4013      	ands	r3, r2
 8002442:	2b20      	cmp	r3, #32
 8002444:	d10f      	bne.n	8002466 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	4013      	ands	r3, r2
 8002450:	2b20      	cmp	r3, #32
 8002452:	d108      	bne.n	8002466 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2221      	movs	r2, #33	; 0x21
 800245a:	4252      	negs	r2, r2
 800245c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	0018      	movs	r0, r3
 8002462:	f000 f915 	bl	8002690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	b002      	add	sp, #8
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	fffffeff 	.word	0xfffffeff

08002474 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b002      	add	sp, #8
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800248c:	46c0      	nop			; (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b002      	add	sp, #8
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b002      	add	sp, #8
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ac:	46c0      	nop			; (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b002      	add	sp, #8
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a34      	ldr	r2, [pc, #208]	; (8002598 <TIM_Base_SetConfig+0xe4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d008      	beq.n	80024de <TIM_Base_SetConfig+0x2a>
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	05db      	lsls	r3, r3, #23
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d003      	beq.n	80024de <TIM_Base_SetConfig+0x2a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a30      	ldr	r2, [pc, #192]	; (800259c <TIM_Base_SetConfig+0xe8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d108      	bne.n	80024f0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2270      	movs	r2, #112	; 0x70
 80024e2:	4393      	bics	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a29      	ldr	r2, [pc, #164]	; (8002598 <TIM_Base_SetConfig+0xe4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d018      	beq.n	800252a <TIM_Base_SetConfig+0x76>
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	05db      	lsls	r3, r3, #23
 80024fe:	429a      	cmp	r2, r3
 8002500:	d013      	beq.n	800252a <TIM_Base_SetConfig+0x76>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a25      	ldr	r2, [pc, #148]	; (800259c <TIM_Base_SetConfig+0xe8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00f      	beq.n	800252a <TIM_Base_SetConfig+0x76>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <TIM_Base_SetConfig+0xec>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00b      	beq.n	800252a <TIM_Base_SetConfig+0x76>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <TIM_Base_SetConfig+0xf0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d007      	beq.n	800252a <TIM_Base_SetConfig+0x76>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a22      	ldr	r2, [pc, #136]	; (80025a8 <TIM_Base_SetConfig+0xf4>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d003      	beq.n	800252a <TIM_Base_SetConfig+0x76>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a21      	ldr	r2, [pc, #132]	; (80025ac <TIM_Base_SetConfig+0xf8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d108      	bne.n	800253c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4a20      	ldr	r2, [pc, #128]	; (80025b0 <TIM_Base_SetConfig+0xfc>)
 800252e:	4013      	ands	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	4393      	bics	r3, r2
 8002542:	001a      	movs	r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a0c      	ldr	r2, [pc, #48]	; (8002598 <TIM_Base_SetConfig+0xe4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d00b      	beq.n	8002582 <TIM_Base_SetConfig+0xce>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <TIM_Base_SetConfig+0xf0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d007      	beq.n	8002582 <TIM_Base_SetConfig+0xce>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <TIM_Base_SetConfig+0xf4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d003      	beq.n	8002582 <TIM_Base_SetConfig+0xce>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <TIM_Base_SetConfig+0xf8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d103      	bne.n	800258a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	615a      	str	r2, [r3, #20]
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b004      	add	sp, #16
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40012c00 	.word	0x40012c00
 800259c:	40000400 	.word	0x40000400
 80025a0:	40002000 	.word	0x40002000
 80025a4:	40014000 	.word	0x40014000
 80025a8:	40014400 	.word	0x40014400
 80025ac:	40014800 	.word	0x40014800
 80025b0:	fffffcff 	.word	0xfffffcff

080025b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	223c      	movs	r2, #60	; 0x3c
 80025c2:	5c9b      	ldrb	r3, [r3, r2]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e055      	b.n	8002678 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	223c      	movs	r2, #60	; 0x3c
 80025d0:	2101      	movs	r1, #1
 80025d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	223d      	movs	r2, #61	; 0x3d
 80025d8:	2102      	movs	r1, #2
 80025da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a23      	ldr	r2, [pc, #140]	; (8002680 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d108      	bne.n	8002608 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a22      	ldr	r2, [pc, #136]	; (8002684 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2270      	movs	r2, #112	; 0x70
 800260c:	4393      	bics	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a16      	ldr	r2, [pc, #88]	; (8002680 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d00f      	beq.n	800264c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	05db      	lsls	r3, r3, #23
 8002634:	429a      	cmp	r2, r3
 8002636:	d009      	beq.n	800264c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a12      	ldr	r2, [pc, #72]	; (8002688 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a11      	ldr	r2, [pc, #68]	; (800268c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d10c      	bne.n	8002666 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	4393      	bics	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	4313      	orrs	r3, r2
 800265c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	223d      	movs	r2, #61	; 0x3d
 800266a:	2101      	movs	r1, #1
 800266c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	223c      	movs	r2, #60	; 0x3c
 8002672:	2100      	movs	r1, #0
 8002674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b004      	add	sp, #16
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40012c00 	.word	0x40012c00
 8002684:	ff0fffff 	.word	0xff0fffff
 8002688:	40000400 	.word	0x40000400
 800268c:	40014000 	.word	0x40014000

08002690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b002      	add	sp, #8
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b002      	add	sp, #8
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e046      	b.n	8002760 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2288      	movs	r2, #136	; 0x88
 80026d6:	589b      	ldr	r3, [r3, r2]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2284      	movs	r2, #132	; 0x84
 80026e0:	2100      	movs	r1, #0
 80026e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	0018      	movs	r0, r3
 80026e8:	f7fe f9e2 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2288      	movs	r2, #136	; 0x88
 80026f0:	2124      	movs	r1, #36	; 0x24
 80026f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2101      	movs	r1, #1
 8002700:	438a      	bics	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f8cc 	bl	80028a4 <UART_SetConfig>
 800270c:	0003      	movs	r3, r0
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e024      	b.n	8002760 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	0018      	movs	r0, r3
 8002722:	f000 fb7d 	bl	8002e20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	490d      	ldr	r1, [pc, #52]	; (8002768 <HAL_UART_Init+0xa8>)
 8002732:	400a      	ands	r2, r1
 8002734:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	212a      	movs	r1, #42	; 0x2a
 8002742:	438a      	bics	r2, r1
 8002744:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2101      	movs	r1, #1
 8002752:	430a      	orrs	r2, r1
 8002754:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	0018      	movs	r0, r3
 800275a:	f000 fc15 	bl	8002f88 <UART_CheckIdleState>
 800275e:	0003      	movs	r3, r0
}
 8002760:	0018      	movs	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	b002      	add	sp, #8
 8002766:	bd80      	pop	{r7, pc}
 8002768:	ffffb7ff 	.word	0xffffb7ff

0800276c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	1dbb      	adds	r3, r7, #6
 800277a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2288      	movs	r2, #136	; 0x88
 8002780:	589b      	ldr	r3, [r3, r2]
 8002782:	2b20      	cmp	r3, #32
 8002784:	d000      	beq.n	8002788 <HAL_UART_Transmit+0x1c>
 8002786:	e088      	b.n	800289a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_UART_Transmit+0x2a>
 800278e:	1dbb      	adds	r3, r7, #6
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e080      	b.n	800289c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	015b      	lsls	r3, r3, #5
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d109      	bne.n	80027ba <HAL_UART_Transmit+0x4e>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2201      	movs	r2, #1
 80027b2:	4013      	ands	r3, r2
 80027b4:	d001      	beq.n	80027ba <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e070      	b.n	800289c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2290      	movs	r2, #144	; 0x90
 80027be:	2100      	movs	r1, #0
 80027c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2288      	movs	r2, #136	; 0x88
 80027c6:	2121      	movs	r1, #33	; 0x21
 80027c8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027ca:	f7fe fb21 	bl	8000e10 <HAL_GetTick>
 80027ce:	0003      	movs	r3, r0
 80027d0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1dba      	adds	r2, r7, #6
 80027d6:	2154      	movs	r1, #84	; 0x54
 80027d8:	8812      	ldrh	r2, [r2, #0]
 80027da:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1dba      	adds	r2, r7, #6
 80027e0:	2156      	movs	r1, #86	; 0x56
 80027e2:	8812      	ldrh	r2, [r2, #0]
 80027e4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	015b      	lsls	r3, r3, #5
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d108      	bne.n	8002804 <HAL_UART_Transmit+0x98>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d104      	bne.n	8002804 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	e003      	b.n	800280c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800280c:	e02c      	b.n	8002868 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	0013      	movs	r3, r2
 8002818:	2200      	movs	r2, #0
 800281a:	2180      	movs	r1, #128	; 0x80
 800281c:	f000 fc02 	bl	8003024 <UART_WaitOnFlagUntilTimeout>
 8002820:	1e03      	subs	r3, r0, #0
 8002822:	d001      	beq.n	8002828 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e039      	b.n	800289c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10b      	bne.n	8002846 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	001a      	movs	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	05d2      	lsls	r2, r2, #23
 800283a:	0dd2      	lsrs	r2, r2, #23
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	3302      	adds	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	e007      	b.n	8002856 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	781a      	ldrb	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	3301      	adds	r3, #1
 8002854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2256      	movs	r2, #86	; 0x56
 800285a:	5a9b      	ldrh	r3, [r3, r2]
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b299      	uxth	r1, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2256      	movs	r2, #86	; 0x56
 8002866:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2256      	movs	r2, #86	; 0x56
 800286c:	5a9b      	ldrh	r3, [r3, r2]
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1cc      	bne.n	800280e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	0013      	movs	r3, r2
 800287e:	2200      	movs	r2, #0
 8002880:	2140      	movs	r1, #64	; 0x40
 8002882:	f000 fbcf 	bl	8003024 <UART_WaitOnFlagUntilTimeout>
 8002886:	1e03      	subs	r3, r0, #0
 8002888:	d001      	beq.n	800288e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e006      	b.n	800289c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2288      	movs	r2, #136	; 0x88
 8002892:	2120      	movs	r1, #32
 8002894:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	e000      	b.n	800289c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800289a:	2302      	movs	r3, #2
  }
}
 800289c:	0018      	movs	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	b008      	add	sp, #32
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a4:	b5b0      	push	{r4, r5, r7, lr}
 80028a6:	b090      	sub	sp, #64	; 0x40
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028ac:	231a      	movs	r3, #26
 80028ae:	2220      	movs	r2, #32
 80028b0:	189b      	adds	r3, r3, r2
 80028b2:	19db      	adds	r3, r3, r7
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4aaf      	ldr	r2, [pc, #700]	; (8002b94 <UART_SetConfig+0x2f0>)
 80028d8:	4013      	ands	r3, r2
 80028da:	0019      	movs	r1, r3
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e2:	430b      	orrs	r3, r1
 80028e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4aaa      	ldr	r2, [pc, #680]	; (8002b98 <UART_SetConfig+0x2f4>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	0018      	movs	r0, r3
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	68d9      	ldr	r1, [r3, #12]
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	0003      	movs	r3, r0
 80028fc:	430b      	orrs	r3, r1
 80028fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4aa4      	ldr	r2, [pc, #656]	; (8002b9c <UART_SetConfig+0x2f8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002916:	4313      	orrs	r3, r2
 8002918:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a9f      	ldr	r2, [pc, #636]	; (8002ba0 <UART_SetConfig+0x2fc>)
 8002922:	4013      	ands	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800292c:	430b      	orrs	r3, r1
 800292e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	220f      	movs	r2, #15
 8002938:	4393      	bics	r3, r2
 800293a:	0018      	movs	r0, r3
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	0003      	movs	r3, r0
 8002946:	430b      	orrs	r3, r1
 8002948:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a95      	ldr	r2, [pc, #596]	; (8002ba4 <UART_SetConfig+0x300>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d131      	bne.n	80029b8 <UART_SetConfig+0x114>
 8002954:	4b94      	ldr	r3, [pc, #592]	; (8002ba8 <UART_SetConfig+0x304>)
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	2203      	movs	r2, #3
 800295a:	4013      	ands	r3, r2
 800295c:	2b03      	cmp	r3, #3
 800295e:	d01d      	beq.n	800299c <UART_SetConfig+0xf8>
 8002960:	d823      	bhi.n	80029aa <UART_SetConfig+0x106>
 8002962:	2b02      	cmp	r3, #2
 8002964:	d00c      	beq.n	8002980 <UART_SetConfig+0xdc>
 8002966:	d820      	bhi.n	80029aa <UART_SetConfig+0x106>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <UART_SetConfig+0xce>
 800296c:	2b01      	cmp	r3, #1
 800296e:	d00e      	beq.n	800298e <UART_SetConfig+0xea>
 8002970:	e01b      	b.n	80029aa <UART_SetConfig+0x106>
 8002972:	231b      	movs	r3, #27
 8002974:	2220      	movs	r2, #32
 8002976:	189b      	adds	r3, r3, r2
 8002978:	19db      	adds	r3, r3, r7
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	e0b4      	b.n	8002aea <UART_SetConfig+0x246>
 8002980:	231b      	movs	r3, #27
 8002982:	2220      	movs	r2, #32
 8002984:	189b      	adds	r3, r3, r2
 8002986:	19db      	adds	r3, r3, r7
 8002988:	2202      	movs	r2, #2
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	e0ad      	b.n	8002aea <UART_SetConfig+0x246>
 800298e:	231b      	movs	r3, #27
 8002990:	2220      	movs	r2, #32
 8002992:	189b      	adds	r3, r3, r2
 8002994:	19db      	adds	r3, r3, r7
 8002996:	2204      	movs	r2, #4
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e0a6      	b.n	8002aea <UART_SetConfig+0x246>
 800299c:	231b      	movs	r3, #27
 800299e:	2220      	movs	r2, #32
 80029a0:	189b      	adds	r3, r3, r2
 80029a2:	19db      	adds	r3, r3, r7
 80029a4:	2208      	movs	r2, #8
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e09f      	b.n	8002aea <UART_SetConfig+0x246>
 80029aa:	231b      	movs	r3, #27
 80029ac:	2220      	movs	r2, #32
 80029ae:	189b      	adds	r3, r3, r2
 80029b0:	19db      	adds	r3, r3, r7
 80029b2:	2210      	movs	r2, #16
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e098      	b.n	8002aea <UART_SetConfig+0x246>
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a7b      	ldr	r2, [pc, #492]	; (8002bac <UART_SetConfig+0x308>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d131      	bne.n	8002a26 <UART_SetConfig+0x182>
 80029c2:	4b79      	ldr	r3, [pc, #484]	; (8002ba8 <UART_SetConfig+0x304>)
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	220c      	movs	r2, #12
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d01d      	beq.n	8002a0a <UART_SetConfig+0x166>
 80029ce:	d823      	bhi.n	8002a18 <UART_SetConfig+0x174>
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d00c      	beq.n	80029ee <UART_SetConfig+0x14a>
 80029d4:	d820      	bhi.n	8002a18 <UART_SetConfig+0x174>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <UART_SetConfig+0x13c>
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d00e      	beq.n	80029fc <UART_SetConfig+0x158>
 80029de:	e01b      	b.n	8002a18 <UART_SetConfig+0x174>
 80029e0:	231b      	movs	r3, #27
 80029e2:	2220      	movs	r2, #32
 80029e4:	189b      	adds	r3, r3, r2
 80029e6:	19db      	adds	r3, r3, r7
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
 80029ec:	e07d      	b.n	8002aea <UART_SetConfig+0x246>
 80029ee:	231b      	movs	r3, #27
 80029f0:	2220      	movs	r2, #32
 80029f2:	189b      	adds	r3, r3, r2
 80029f4:	19db      	adds	r3, r3, r7
 80029f6:	2202      	movs	r2, #2
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	e076      	b.n	8002aea <UART_SetConfig+0x246>
 80029fc:	231b      	movs	r3, #27
 80029fe:	2220      	movs	r2, #32
 8002a00:	189b      	adds	r3, r3, r2
 8002a02:	19db      	adds	r3, r3, r7
 8002a04:	2204      	movs	r2, #4
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	e06f      	b.n	8002aea <UART_SetConfig+0x246>
 8002a0a:	231b      	movs	r3, #27
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	189b      	adds	r3, r3, r2
 8002a10:	19db      	adds	r3, r3, r7
 8002a12:	2208      	movs	r2, #8
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e068      	b.n	8002aea <UART_SetConfig+0x246>
 8002a18:	231b      	movs	r3, #27
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	189b      	adds	r3, r3, r2
 8002a1e:	19db      	adds	r3, r3, r7
 8002a20:	2210      	movs	r2, #16
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e061      	b.n	8002aea <UART_SetConfig+0x246>
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a61      	ldr	r2, [pc, #388]	; (8002bb0 <UART_SetConfig+0x30c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d106      	bne.n	8002a3e <UART_SetConfig+0x19a>
 8002a30:	231b      	movs	r3, #27
 8002a32:	2220      	movs	r2, #32
 8002a34:	189b      	adds	r3, r3, r2
 8002a36:	19db      	adds	r3, r3, r7
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e055      	b.n	8002aea <UART_SetConfig+0x246>
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5c      	ldr	r2, [pc, #368]	; (8002bb4 <UART_SetConfig+0x310>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d106      	bne.n	8002a56 <UART_SetConfig+0x1b2>
 8002a48:	231b      	movs	r3, #27
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	189b      	adds	r3, r3, r2
 8002a4e:	19db      	adds	r3, r3, r7
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
 8002a54:	e049      	b.n	8002aea <UART_SetConfig+0x246>
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a50      	ldr	r2, [pc, #320]	; (8002b9c <UART_SetConfig+0x2f8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d13e      	bne.n	8002ade <UART_SetConfig+0x23a>
 8002a60:	4b51      	ldr	r3, [pc, #324]	; (8002ba8 <UART_SetConfig+0x304>)
 8002a62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a64:	23c0      	movs	r3, #192	; 0xc0
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	4013      	ands	r3, r2
 8002a6a:	22c0      	movs	r2, #192	; 0xc0
 8002a6c:	0112      	lsls	r2, r2, #4
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d027      	beq.n	8002ac2 <UART_SetConfig+0x21e>
 8002a72:	22c0      	movs	r2, #192	; 0xc0
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d82a      	bhi.n	8002ad0 <UART_SetConfig+0x22c>
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d011      	beq.n	8002aa6 <UART_SetConfig+0x202>
 8002a82:	2280      	movs	r2, #128	; 0x80
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d822      	bhi.n	8002ad0 <UART_SetConfig+0x22c>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d004      	beq.n	8002a98 <UART_SetConfig+0x1f4>
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	00d2      	lsls	r2, r2, #3
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00e      	beq.n	8002ab4 <UART_SetConfig+0x210>
 8002a96:	e01b      	b.n	8002ad0 <UART_SetConfig+0x22c>
 8002a98:	231b      	movs	r3, #27
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	189b      	adds	r3, r3, r2
 8002a9e:	19db      	adds	r3, r3, r7
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
 8002aa4:	e021      	b.n	8002aea <UART_SetConfig+0x246>
 8002aa6:	231b      	movs	r3, #27
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	189b      	adds	r3, r3, r2
 8002aac:	19db      	adds	r3, r3, r7
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e01a      	b.n	8002aea <UART_SetConfig+0x246>
 8002ab4:	231b      	movs	r3, #27
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	189b      	adds	r3, r3, r2
 8002aba:	19db      	adds	r3, r3, r7
 8002abc:	2204      	movs	r2, #4
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e013      	b.n	8002aea <UART_SetConfig+0x246>
 8002ac2:	231b      	movs	r3, #27
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	189b      	adds	r3, r3, r2
 8002ac8:	19db      	adds	r3, r3, r7
 8002aca:	2208      	movs	r2, #8
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e00c      	b.n	8002aea <UART_SetConfig+0x246>
 8002ad0:	231b      	movs	r3, #27
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	189b      	adds	r3, r3, r2
 8002ad6:	19db      	adds	r3, r3, r7
 8002ad8:	2210      	movs	r2, #16
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e005      	b.n	8002aea <UART_SetConfig+0x246>
 8002ade:	231b      	movs	r3, #27
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	19db      	adds	r3, r3, r7
 8002ae6:	2210      	movs	r2, #16
 8002ae8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a2b      	ldr	r2, [pc, #172]	; (8002b9c <UART_SetConfig+0x2f8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d000      	beq.n	8002af6 <UART_SetConfig+0x252>
 8002af4:	e0a9      	b.n	8002c4a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002af6:	231b      	movs	r3, #27
 8002af8:	2220      	movs	r2, #32
 8002afa:	189b      	adds	r3, r3, r2
 8002afc:	19db      	adds	r3, r3, r7
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d015      	beq.n	8002b30 <UART_SetConfig+0x28c>
 8002b04:	dc18      	bgt.n	8002b38 <UART_SetConfig+0x294>
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d00d      	beq.n	8002b26 <UART_SetConfig+0x282>
 8002b0a:	dc15      	bgt.n	8002b38 <UART_SetConfig+0x294>
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <UART_SetConfig+0x272>
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d005      	beq.n	8002b20 <UART_SetConfig+0x27c>
 8002b14:	e010      	b.n	8002b38 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b16:	f7ff f8f9 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b1e:	e014      	b.n	8002b4a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <UART_SetConfig+0x314>)
 8002b22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b24:	e011      	b.n	8002b4a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b26:	f7ff f865 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b2e:	e00c      	b.n	8002b4a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b36:	e008      	b.n	8002b4a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002b3c:	231a      	movs	r3, #26
 8002b3e:	2220      	movs	r2, #32
 8002b40:	189b      	adds	r3, r3, r2
 8002b42:	19db      	adds	r3, r3, r7
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
        break;
 8002b48:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d100      	bne.n	8002b52 <UART_SetConfig+0x2ae>
 8002b50:	e14b      	b.n	8002dea <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b56:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <UART_SetConfig+0x318>)
 8002b58:	0052      	lsls	r2, r2, #1
 8002b5a:	5ad3      	ldrh	r3, [r2, r3]
 8002b5c:	0019      	movs	r1, r3
 8002b5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b60:	f7fd fae2 	bl	8000128 <__udivsi3>
 8002b64:	0003      	movs	r3, r0
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	0013      	movs	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	189b      	adds	r3, r3, r2
 8002b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d305      	bcc.n	8002b84 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d91d      	bls.n	8002bc0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002b84:	231a      	movs	r3, #26
 8002b86:	2220      	movs	r2, #32
 8002b88:	189b      	adds	r3, r3, r2
 8002b8a:	19db      	adds	r3, r3, r7
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
 8002b90:	e12b      	b.n	8002dea <UART_SetConfig+0x546>
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	cfff69f3 	.word	0xcfff69f3
 8002b98:	ffffcfff 	.word	0xffffcfff
 8002b9c:	40008000 	.word	0x40008000
 8002ba0:	11fff4ff 	.word	0x11fff4ff
 8002ba4:	40013800 	.word	0x40013800
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40004400 	.word	0x40004400
 8002bb0:	40004800 	.word	0x40004800
 8002bb4:	40004c00 	.word	0x40004c00
 8002bb8:	00f42400 	.word	0x00f42400
 8002bbc:	08003dcc 	.word	0x08003dcc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bcc:	4b92      	ldr	r3, [pc, #584]	; (8002e18 <UART_SetConfig+0x574>)
 8002bce:	0052      	lsls	r2, r2, #1
 8002bd0:	5ad3      	ldrh	r3, [r2, r3]
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	69b8      	ldr	r0, [r7, #24]
 8002bde:	69f9      	ldr	r1, [r7, #28]
 8002be0:	f7fd fc18 	bl	8000414 <__aeabi_uldivmod>
 8002be4:	0002      	movs	r2, r0
 8002be6:	000b      	movs	r3, r1
 8002be8:	0e11      	lsrs	r1, r2, #24
 8002bea:	021d      	lsls	r5, r3, #8
 8002bec:	430d      	orrs	r5, r1
 8002bee:	0214      	lsls	r4, r2, #8
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68b8      	ldr	r0, [r7, #8]
 8002bfe:	68f9      	ldr	r1, [r7, #12]
 8002c00:	1900      	adds	r0, r0, r4
 8002c02:	4169      	adcs	r1, r5
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f7fd fbff 	bl	8000414 <__aeabi_uldivmod>
 8002c16:	0002      	movs	r2, r0
 8002c18:	000b      	movs	r3, r1
 8002c1a:	0013      	movs	r3, r2
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c20:	23c0      	movs	r3, #192	; 0xc0
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d309      	bcc.n	8002c3c <UART_SetConfig+0x398>
 8002c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	035b      	lsls	r3, r3, #13
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d204      	bcs.n	8002c3c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	e0d6      	b.n	8002dea <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002c3c:	231a      	movs	r3, #26
 8002c3e:	2220      	movs	r2, #32
 8002c40:	189b      	adds	r3, r3, r2
 8002c42:	19db      	adds	r3, r3, r7
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e0cf      	b.n	8002dea <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	69da      	ldr	r2, [r3, #28]
 8002c4e:	2380      	movs	r3, #128	; 0x80
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d000      	beq.n	8002c58 <UART_SetConfig+0x3b4>
 8002c56:	e070      	b.n	8002d3a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002c58:	231b      	movs	r3, #27
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	189b      	adds	r3, r3, r2
 8002c5e:	19db      	adds	r3, r3, r7
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d015      	beq.n	8002c92 <UART_SetConfig+0x3ee>
 8002c66:	dc18      	bgt.n	8002c9a <UART_SetConfig+0x3f6>
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d00d      	beq.n	8002c88 <UART_SetConfig+0x3e4>
 8002c6c:	dc15      	bgt.n	8002c9a <UART_SetConfig+0x3f6>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <UART_SetConfig+0x3d4>
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d005      	beq.n	8002c82 <UART_SetConfig+0x3de>
 8002c76:	e010      	b.n	8002c9a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c78:	f7ff f848 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c80:	e014      	b.n	8002cac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c82:	4b66      	ldr	r3, [pc, #408]	; (8002e1c <UART_SetConfig+0x578>)
 8002c84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c86:	e011      	b.n	8002cac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c88:	f7fe ffb4 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c90:	e00c      	b.n	8002cac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c98:	e008      	b.n	8002cac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002c9e:	231a      	movs	r3, #26
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	19db      	adds	r3, r3, r7
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
        break;
 8002caa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d100      	bne.n	8002cb4 <UART_SetConfig+0x410>
 8002cb2:	e09a      	b.n	8002dea <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb8:	4b57      	ldr	r3, [pc, #348]	; (8002e18 <UART_SetConfig+0x574>)
 8002cba:	0052      	lsls	r2, r2, #1
 8002cbc:	5ad3      	ldrh	r3, [r2, r3]
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cc2:	f7fd fa31 	bl	8000128 <__udivsi3>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	005a      	lsls	r2, r3, #1
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	18d2      	adds	r2, r2, r3
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	0010      	movs	r0, r2
 8002cda:	f7fd fa25 	bl	8000128 <__udivsi3>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	2b0f      	cmp	r3, #15
 8002ce6:	d921      	bls.n	8002d2c <UART_SetConfig+0x488>
 8002ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	025b      	lsls	r3, r3, #9
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d21c      	bcs.n	8002d2c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	200e      	movs	r0, #14
 8002cf8:	2420      	movs	r4, #32
 8002cfa:	1903      	adds	r3, r0, r4
 8002cfc:	19db      	adds	r3, r3, r7
 8002cfe:	210f      	movs	r1, #15
 8002d00:	438a      	bics	r2, r1
 8002d02:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2207      	movs	r2, #7
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b299      	uxth	r1, r3
 8002d10:	1903      	adds	r3, r0, r4
 8002d12:	19db      	adds	r3, r3, r7
 8002d14:	1902      	adds	r2, r0, r4
 8002d16:	19d2      	adds	r2, r2, r7
 8002d18:	8812      	ldrh	r2, [r2, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	1902      	adds	r2, r0, r4
 8002d24:	19d2      	adds	r2, r2, r7
 8002d26:	8812      	ldrh	r2, [r2, #0]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	e05e      	b.n	8002dea <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002d2c:	231a      	movs	r3, #26
 8002d2e:	2220      	movs	r2, #32
 8002d30:	189b      	adds	r3, r3, r2
 8002d32:	19db      	adds	r3, r3, r7
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	e057      	b.n	8002dea <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d3a:	231b      	movs	r3, #27
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	189b      	adds	r3, r3, r2
 8002d40:	19db      	adds	r3, r3, r7
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d015      	beq.n	8002d74 <UART_SetConfig+0x4d0>
 8002d48:	dc18      	bgt.n	8002d7c <UART_SetConfig+0x4d8>
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d00d      	beq.n	8002d6a <UART_SetConfig+0x4c6>
 8002d4e:	dc15      	bgt.n	8002d7c <UART_SetConfig+0x4d8>
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <UART_SetConfig+0x4b6>
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d005      	beq.n	8002d64 <UART_SetConfig+0x4c0>
 8002d58:	e010      	b.n	8002d7c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d5a:	f7fe ffd7 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d62:	e014      	b.n	8002d8e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d64:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <UART_SetConfig+0x578>)
 8002d66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d68:	e011      	b.n	8002d8e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d6a:	f7fe ff43 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d72:	e00c      	b.n	8002d8e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d7a:	e008      	b.n	8002d8e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002d80:	231a      	movs	r3, #26
 8002d82:	2220      	movs	r2, #32
 8002d84:	189b      	adds	r3, r3, r2
 8002d86:	19db      	adds	r3, r3, r7
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
        break;
 8002d8c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d02a      	beq.n	8002dea <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d98:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <UART_SetConfig+0x574>)
 8002d9a:	0052      	lsls	r2, r2, #1
 8002d9c:	5ad3      	ldrh	r3, [r2, r3]
 8002d9e:	0019      	movs	r1, r3
 8002da0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002da2:	f7fd f9c1 	bl	8000128 <__udivsi3>
 8002da6:	0003      	movs	r3, r0
 8002da8:	001a      	movs	r2, r3
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	18d2      	adds	r2, r2, r3
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	0019      	movs	r1, r3
 8002db8:	0010      	movs	r0, r2
 8002dba:	f7fd f9b5 	bl	8000128 <__udivsi3>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	2b0f      	cmp	r3, #15
 8002dc6:	d90a      	bls.n	8002dde <UART_SetConfig+0x53a>
 8002dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	025b      	lsls	r3, r3, #9
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d205      	bcs.n	8002dde <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60da      	str	r2, [r3, #12]
 8002ddc:	e005      	b.n	8002dea <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002dde:	231a      	movs	r3, #26
 8002de0:	2220      	movs	r2, #32
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	19db      	adds	r3, r3, r7
 8002de6:	2201      	movs	r2, #1
 8002de8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	226a      	movs	r2, #106	; 0x6a
 8002dee:	2101      	movs	r1, #1
 8002df0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	2268      	movs	r2, #104	; 0x68
 8002df6:	2101      	movs	r1, #1
 8002df8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	2200      	movs	r2, #0
 8002e04:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002e06:	231a      	movs	r3, #26
 8002e08:	2220      	movs	r2, #32
 8002e0a:	189b      	adds	r3, r3, r2
 8002e0c:	19db      	adds	r3, r3, r7
 8002e0e:	781b      	ldrb	r3, [r3, #0]
}
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b010      	add	sp, #64	; 0x40
 8002e16:	bdb0      	pop	{r4, r5, r7, pc}
 8002e18:	08003dcc 	.word	0x08003dcc
 8002e1c:	00f42400 	.word	0x00f42400

08002e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d00b      	beq.n	8002e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a4a      	ldr	r2, [pc, #296]	; (8002f64 <UART_AdvFeatureConfig+0x144>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	2202      	movs	r2, #2
 8002e50:	4013      	ands	r3, r2
 8002e52:	d00b      	beq.n	8002e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4a43      	ldr	r2, [pc, #268]	; (8002f68 <UART_AdvFeatureConfig+0x148>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	2204      	movs	r2, #4
 8002e72:	4013      	ands	r3, r2
 8002e74:	d00b      	beq.n	8002e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a3b      	ldr	r2, [pc, #236]	; (8002f6c <UART_AdvFeatureConfig+0x14c>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	0019      	movs	r1, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	2208      	movs	r2, #8
 8002e94:	4013      	ands	r3, r2
 8002e96:	d00b      	beq.n	8002eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4a34      	ldr	r2, [pc, #208]	; (8002f70 <UART_AdvFeatureConfig+0x150>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d00b      	beq.n	8002ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a2c      	ldr	r2, [pc, #176]	; (8002f74 <UART_AdvFeatureConfig+0x154>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4a25      	ldr	r2, [pc, #148]	; (8002f78 <UART_AdvFeatureConfig+0x158>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	2240      	movs	r2, #64	; 0x40
 8002efa:	4013      	ands	r3, r2
 8002efc:	d01d      	beq.n	8002f3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4a1d      	ldr	r2, [pc, #116]	; (8002f7c <UART_AdvFeatureConfig+0x15c>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	0019      	movs	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	035b      	lsls	r3, r3, #13
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d10b      	bne.n	8002f3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <UART_AdvFeatureConfig+0x160>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	2280      	movs	r2, #128	; 0x80
 8002f40:	4013      	ands	r3, r2
 8002f42:	d00b      	beq.n	8002f5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4a0e      	ldr	r2, [pc, #56]	; (8002f84 <UART_AdvFeatureConfig+0x164>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	605a      	str	r2, [r3, #4]
  }
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	fffdffff 	.word	0xfffdffff
 8002f68:	fffeffff 	.word	0xfffeffff
 8002f6c:	fffbffff 	.word	0xfffbffff
 8002f70:	ffff7fff 	.word	0xffff7fff
 8002f74:	ffffefff 	.word	0xffffefff
 8002f78:	ffffdfff 	.word	0xffffdfff
 8002f7c:	ffefffff 	.word	0xffefffff
 8002f80:	ff9fffff 	.word	0xff9fffff
 8002f84:	fff7ffff 	.word	0xfff7ffff

08002f88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2290      	movs	r2, #144	; 0x90
 8002f94:	2100      	movs	r1, #0
 8002f96:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f98:	f7fd ff3a 	bl	8000e10 <HAL_GetTick>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d10c      	bne.n	8002fc8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	0391      	lsls	r1, r2, #14
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4a1a      	ldr	r2, [pc, #104]	; (8003020 <UART_CheckIdleState+0x98>)
 8002fb8:	9200      	str	r2, [sp, #0]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f000 f832 	bl	8003024 <UART_WaitOnFlagUntilTimeout>
 8002fc0:	1e03      	subs	r3, r0, #0
 8002fc2:	d001      	beq.n	8002fc8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e026      	b.n	8003016 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2204      	movs	r2, #4
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d10c      	bne.n	8002ff0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	03d1      	lsls	r1, r2, #15
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	4a10      	ldr	r2, [pc, #64]	; (8003020 <UART_CheckIdleState+0x98>)
 8002fe0:	9200      	str	r2, [sp, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f000 f81e 	bl	8003024 <UART_WaitOnFlagUntilTimeout>
 8002fe8:	1e03      	subs	r3, r0, #0
 8002fea:	d001      	beq.n	8002ff0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e012      	b.n	8003016 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2288      	movs	r2, #136	; 0x88
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	228c      	movs	r2, #140	; 0x8c
 8002ffc:	2120      	movs	r1, #32
 8002ffe:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2284      	movs	r2, #132	; 0x84
 8003010:	2100      	movs	r1, #0
 8003012:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b004      	add	sp, #16
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	01ffffff 	.word	0x01ffffff

08003024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b094      	sub	sp, #80	; 0x50
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	1dfb      	adds	r3, r7, #7
 8003032:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003034:	e0a7      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003038:	3301      	adds	r3, #1
 800303a:	d100      	bne.n	800303e <UART_WaitOnFlagUntilTimeout+0x1a>
 800303c:	e0a3      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303e:	f7fd fee7 	bl	8000e10 <HAL_GetTick>
 8003042:	0002      	movs	r2, r0
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800304a:	429a      	cmp	r2, r3
 800304c:	d302      	bcc.n	8003054 <UART_WaitOnFlagUntilTimeout+0x30>
 800304e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003050:	2b00      	cmp	r3, #0
 8003052:	d13f      	bne.n	80030d4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003054:	f3ef 8310 	mrs	r3, PRIMASK
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800305c:	647b      	str	r3, [r7, #68]	; 0x44
 800305e:	2301      	movs	r3, #1
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	f383 8810 	msr	PRIMASK, r3
}
 8003068:	46c0      	nop			; (mov r8, r8)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	494e      	ldr	r1, [pc, #312]	; (80031b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003076:	400a      	ands	r2, r1
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	f383 8810 	msr	PRIMASK, r3
}
 8003084:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003086:	f3ef 8310 	mrs	r3, PRIMASK
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308e:	643b      	str	r3, [r7, #64]	; 0x40
 8003090:	2301      	movs	r3, #1
 8003092:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	f383 8810 	msr	PRIMASK, r3
}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2101      	movs	r1, #1
 80030a8:	438a      	bics	r2, r1
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b2:	f383 8810 	msr	PRIMASK, r3
}
 80030b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2288      	movs	r2, #136	; 0x88
 80030bc:	2120      	movs	r1, #32
 80030be:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	228c      	movs	r2, #140	; 0x8c
 80030c4:	2120      	movs	r1, #32
 80030c6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2284      	movs	r2, #132	; 0x84
 80030cc:	2100      	movs	r1, #0
 80030ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e069      	b.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2204      	movs	r2, #4
 80030dc:	4013      	ands	r3, r2
 80030de:	d052      	beq.n	8003186 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	401a      	ands	r2, r3
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d148      	bne.n	8003186 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2280      	movs	r2, #128	; 0x80
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003102:	613b      	str	r3, [r7, #16]
  return(result);
 8003104:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003108:	2301      	movs	r3, #1
 800310a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f383 8810 	msr	PRIMASK, r3
}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4924      	ldr	r1, [pc, #144]	; (80031b0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003120:	400a      	ands	r2, r1
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003126:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f383 8810 	msr	PRIMASK, r3
}
 800312e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003130:	f3ef 8310 	mrs	r3, PRIMASK
 8003134:	61fb      	str	r3, [r7, #28]
  return(result);
 8003136:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003138:	64bb      	str	r3, [r7, #72]	; 0x48
 800313a:	2301      	movs	r3, #1
 800313c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	f383 8810 	msr	PRIMASK, r3
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2101      	movs	r1, #1
 8003152:	438a      	bics	r2, r1
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	f383 8810 	msr	PRIMASK, r3
}
 8003160:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2288      	movs	r2, #136	; 0x88
 8003166:	2120      	movs	r1, #32
 8003168:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	228c      	movs	r2, #140	; 0x8c
 800316e:	2120      	movs	r1, #32
 8003170:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2290      	movs	r2, #144	; 0x90
 8003176:	2120      	movs	r1, #32
 8003178:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2284      	movs	r2, #132	; 0x84
 800317e:	2100      	movs	r1, #0
 8003180:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e010      	b.n	80031a8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	425a      	negs	r2, r3
 8003196:	4153      	adcs	r3, r2
 8003198:	b2db      	uxtb	r3, r3
 800319a:	001a      	movs	r2, r3
 800319c:	1dfb      	adds	r3, r7, #7
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d100      	bne.n	80031a6 <UART_WaitOnFlagUntilTimeout+0x182>
 80031a4:	e747      	b.n	8003036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	0018      	movs	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b014      	add	sp, #80	; 0x50
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	fffffe5f 	.word	0xfffffe5f

080031b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2284      	movs	r2, #132	; 0x84
 80031c0:	5c9b      	ldrb	r3, [r3, r2]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_UARTEx_DisableFifoMode+0x16>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e027      	b.n	800321a <HAL_UARTEx_DisableFifoMode+0x66>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2284      	movs	r2, #132	; 0x84
 80031ce:	2101      	movs	r1, #1
 80031d0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2288      	movs	r2, #136	; 0x88
 80031d6:	2124      	movs	r1, #36	; 0x24
 80031d8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2101      	movs	r1, #1
 80031ee:	438a      	bics	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <HAL_UARTEx_DisableFifoMode+0x70>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2288      	movs	r2, #136	; 0x88
 800320c:	2120      	movs	r1, #32
 800320e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2284      	movs	r2, #132	; 0x84
 8003214:	2100      	movs	r1, #0
 8003216:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b004      	add	sp, #16
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	dfffffff 	.word	0xdfffffff

08003228 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2284      	movs	r2, #132	; 0x84
 8003236:	5c9b      	ldrb	r3, [r3, r2]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800323c:	2302      	movs	r3, #2
 800323e:	e02e      	b.n	800329e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2284      	movs	r2, #132	; 0x84
 8003244:	2101      	movs	r1, #1
 8003246:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2288      	movs	r2, #136	; 0x88
 800324c:	2124      	movs	r1, #36	; 0x24
 800324e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2101      	movs	r1, #1
 8003264:	438a      	bics	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	08d9      	lsrs	r1, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	0018      	movs	r0, r3
 8003280:	f000 f854 	bl	800332c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2288      	movs	r2, #136	; 0x88
 8003290:	2120      	movs	r1, #32
 8003292:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2284      	movs	r2, #132	; 0x84
 8003298:	2100      	movs	r1, #0
 800329a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	0018      	movs	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b004      	add	sp, #16
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2284      	movs	r2, #132	; 0x84
 80032b6:	5c9b      	ldrb	r3, [r3, r2]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80032bc:	2302      	movs	r3, #2
 80032be:	e02f      	b.n	8003320 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2284      	movs	r2, #132	; 0x84
 80032c4:	2101      	movs	r1, #1
 80032c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2288      	movs	r2, #136	; 0x88
 80032cc:	2124      	movs	r1, #36	; 0x24
 80032ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2101      	movs	r1, #1
 80032e4:	438a      	bics	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	4a0e      	ldr	r2, [pc, #56]	; (8003328 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	0019      	movs	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	0018      	movs	r0, r3
 8003302:	f000 f813 	bl	800332c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2288      	movs	r2, #136	; 0x88
 8003312:	2120      	movs	r1, #32
 8003314:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2284      	movs	r2, #132	; 0x84
 800331a:	2100      	movs	r1, #0
 800331c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	0018      	movs	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	b004      	add	sp, #16
 8003326:	bd80      	pop	{r7, pc}
 8003328:	f1ffffff 	.word	0xf1ffffff

0800332c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800332c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003338:	2b00      	cmp	r3, #0
 800333a:	d108      	bne.n	800334e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	226a      	movs	r2, #106	; 0x6a
 8003340:	2101      	movs	r1, #1
 8003342:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2268      	movs	r2, #104	; 0x68
 8003348:	2101      	movs	r1, #1
 800334a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800334c:	e043      	b.n	80033d6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800334e:	260f      	movs	r6, #15
 8003350:	19bb      	adds	r3, r7, r6
 8003352:	2208      	movs	r2, #8
 8003354:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003356:	200e      	movs	r0, #14
 8003358:	183b      	adds	r3, r7, r0
 800335a:	2208      	movs	r2, #8
 800335c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	0e5b      	lsrs	r3, r3, #25
 8003366:	b2da      	uxtb	r2, r3
 8003368:	240d      	movs	r4, #13
 800336a:	193b      	adds	r3, r7, r4
 800336c:	2107      	movs	r1, #7
 800336e:	400a      	ands	r2, r1
 8003370:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	0f5b      	lsrs	r3, r3, #29
 800337a:	b2da      	uxtb	r2, r3
 800337c:	250c      	movs	r5, #12
 800337e:	197b      	adds	r3, r7, r5
 8003380:	2107      	movs	r1, #7
 8003382:	400a      	ands	r2, r1
 8003384:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003386:	183b      	adds	r3, r7, r0
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	197a      	adds	r2, r7, r5
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	4914      	ldr	r1, [pc, #80]	; (80033e0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003390:	5c8a      	ldrb	r2, [r1, r2]
 8003392:	435a      	muls	r2, r3
 8003394:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003396:	197b      	adds	r3, r7, r5
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	4a12      	ldr	r2, [pc, #72]	; (80033e4 <UARTEx_SetNbDataToProcess+0xb8>)
 800339c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800339e:	0019      	movs	r1, r3
 80033a0:	f7fc ff4c 	bl	800023c <__divsi3>
 80033a4:	0003      	movs	r3, r0
 80033a6:	b299      	uxth	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	226a      	movs	r2, #106	; 0x6a
 80033ac:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033ae:	19bb      	adds	r3, r7, r6
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	193a      	adds	r2, r7, r4
 80033b4:	7812      	ldrb	r2, [r2, #0]
 80033b6:	490a      	ldr	r1, [pc, #40]	; (80033e0 <UARTEx_SetNbDataToProcess+0xb4>)
 80033b8:	5c8a      	ldrb	r2, [r1, r2]
 80033ba:	435a      	muls	r2, r3
 80033bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80033be:	193b      	adds	r3, r7, r4
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <UARTEx_SetNbDataToProcess+0xb8>)
 80033c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80033c6:	0019      	movs	r1, r3
 80033c8:	f7fc ff38 	bl	800023c <__divsi3>
 80033cc:	0003      	movs	r3, r0
 80033ce:	b299      	uxth	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2268      	movs	r2, #104	; 0x68
 80033d4:	5299      	strh	r1, [r3, r2]
}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	b005      	add	sp, #20
 80033dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	08003de4 	.word	0x08003de4
 80033e4:	08003dec 	.word	0x08003dec

080033e8 <__errno>:
 80033e8:	4b01      	ldr	r3, [pc, #4]	; (80033f0 <__errno+0x8>)
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	4770      	bx	lr
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	2000000c 	.word	0x2000000c

080033f4 <__libc_init_array>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	2600      	movs	r6, #0
 80033f8:	4d0c      	ldr	r5, [pc, #48]	; (800342c <__libc_init_array+0x38>)
 80033fa:	4c0d      	ldr	r4, [pc, #52]	; (8003430 <__libc_init_array+0x3c>)
 80033fc:	1b64      	subs	r4, r4, r5
 80033fe:	10a4      	asrs	r4, r4, #2
 8003400:	42a6      	cmp	r6, r4
 8003402:	d109      	bne.n	8003418 <__libc_init_array+0x24>
 8003404:	2600      	movs	r6, #0
 8003406:	f000 fc8b 	bl	8003d20 <_init>
 800340a:	4d0a      	ldr	r5, [pc, #40]	; (8003434 <__libc_init_array+0x40>)
 800340c:	4c0a      	ldr	r4, [pc, #40]	; (8003438 <__libc_init_array+0x44>)
 800340e:	1b64      	subs	r4, r4, r5
 8003410:	10a4      	asrs	r4, r4, #2
 8003412:	42a6      	cmp	r6, r4
 8003414:	d105      	bne.n	8003422 <__libc_init_array+0x2e>
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	00b3      	lsls	r3, r6, #2
 800341a:	58eb      	ldr	r3, [r5, r3]
 800341c:	4798      	blx	r3
 800341e:	3601      	adds	r6, #1
 8003420:	e7ee      	b.n	8003400 <__libc_init_array+0xc>
 8003422:	00b3      	lsls	r3, r6, #2
 8003424:	58eb      	ldr	r3, [r5, r3]
 8003426:	4798      	blx	r3
 8003428:	3601      	adds	r6, #1
 800342a:	e7f2      	b.n	8003412 <__libc_init_array+0x1e>
 800342c:	08003e30 	.word	0x08003e30
 8003430:	08003e30 	.word	0x08003e30
 8003434:	08003e30 	.word	0x08003e30
 8003438:	08003e34 	.word	0x08003e34

0800343c <memset>:
 800343c:	0003      	movs	r3, r0
 800343e:	1882      	adds	r2, r0, r2
 8003440:	4293      	cmp	r3, r2
 8003442:	d100      	bne.n	8003446 <memset+0xa>
 8003444:	4770      	bx	lr
 8003446:	7019      	strb	r1, [r3, #0]
 8003448:	3301      	adds	r3, #1
 800344a:	e7f9      	b.n	8003440 <memset+0x4>

0800344c <siprintf>:
 800344c:	b40e      	push	{r1, r2, r3}
 800344e:	b500      	push	{lr}
 8003450:	490b      	ldr	r1, [pc, #44]	; (8003480 <siprintf+0x34>)
 8003452:	b09c      	sub	sp, #112	; 0x70
 8003454:	ab1d      	add	r3, sp, #116	; 0x74
 8003456:	9002      	str	r0, [sp, #8]
 8003458:	9006      	str	r0, [sp, #24]
 800345a:	9107      	str	r1, [sp, #28]
 800345c:	9104      	str	r1, [sp, #16]
 800345e:	4809      	ldr	r0, [pc, #36]	; (8003484 <siprintf+0x38>)
 8003460:	4909      	ldr	r1, [pc, #36]	; (8003488 <siprintf+0x3c>)
 8003462:	cb04      	ldmia	r3!, {r2}
 8003464:	9105      	str	r1, [sp, #20]
 8003466:	6800      	ldr	r0, [r0, #0]
 8003468:	a902      	add	r1, sp, #8
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	f000 f870 	bl	8003550 <_svfiprintf_r>
 8003470:	2300      	movs	r3, #0
 8003472:	9a02      	ldr	r2, [sp, #8]
 8003474:	7013      	strb	r3, [r2, #0]
 8003476:	b01c      	add	sp, #112	; 0x70
 8003478:	bc08      	pop	{r3}
 800347a:	b003      	add	sp, #12
 800347c:	4718      	bx	r3
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	7fffffff 	.word	0x7fffffff
 8003484:	2000000c 	.word	0x2000000c
 8003488:	ffff0208 	.word	0xffff0208

0800348c <__ssputs_r>:
 800348c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800348e:	688e      	ldr	r6, [r1, #8]
 8003490:	b085      	sub	sp, #20
 8003492:	0007      	movs	r7, r0
 8003494:	000c      	movs	r4, r1
 8003496:	9203      	str	r2, [sp, #12]
 8003498:	9301      	str	r3, [sp, #4]
 800349a:	429e      	cmp	r6, r3
 800349c:	d83c      	bhi.n	8003518 <__ssputs_r+0x8c>
 800349e:	2390      	movs	r3, #144	; 0x90
 80034a0:	898a      	ldrh	r2, [r1, #12]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	421a      	tst	r2, r3
 80034a6:	d034      	beq.n	8003512 <__ssputs_r+0x86>
 80034a8:	6909      	ldr	r1, [r1, #16]
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	6960      	ldr	r0, [r4, #20]
 80034ae:	1a5b      	subs	r3, r3, r1
 80034b0:	9302      	str	r3, [sp, #8]
 80034b2:	2303      	movs	r3, #3
 80034b4:	4343      	muls	r3, r0
 80034b6:	0fdd      	lsrs	r5, r3, #31
 80034b8:	18ed      	adds	r5, r5, r3
 80034ba:	9b01      	ldr	r3, [sp, #4]
 80034bc:	9802      	ldr	r0, [sp, #8]
 80034be:	3301      	adds	r3, #1
 80034c0:	181b      	adds	r3, r3, r0
 80034c2:	106d      	asrs	r5, r5, #1
 80034c4:	42ab      	cmp	r3, r5
 80034c6:	d900      	bls.n	80034ca <__ssputs_r+0x3e>
 80034c8:	001d      	movs	r5, r3
 80034ca:	0553      	lsls	r3, r2, #21
 80034cc:	d532      	bpl.n	8003534 <__ssputs_r+0xa8>
 80034ce:	0029      	movs	r1, r5
 80034d0:	0038      	movs	r0, r7
 80034d2:	f000 fb53 	bl	8003b7c <_malloc_r>
 80034d6:	1e06      	subs	r6, r0, #0
 80034d8:	d109      	bne.n	80034ee <__ssputs_r+0x62>
 80034da:	230c      	movs	r3, #12
 80034dc:	603b      	str	r3, [r7, #0]
 80034de:	2340      	movs	r3, #64	; 0x40
 80034e0:	2001      	movs	r0, #1
 80034e2:	89a2      	ldrh	r2, [r4, #12]
 80034e4:	4240      	negs	r0, r0
 80034e6:	4313      	orrs	r3, r2
 80034e8:	81a3      	strh	r3, [r4, #12]
 80034ea:	b005      	add	sp, #20
 80034ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ee:	9a02      	ldr	r2, [sp, #8]
 80034f0:	6921      	ldr	r1, [r4, #16]
 80034f2:	f000 faba 	bl	8003a6a <memcpy>
 80034f6:	89a3      	ldrh	r3, [r4, #12]
 80034f8:	4a14      	ldr	r2, [pc, #80]	; (800354c <__ssputs_r+0xc0>)
 80034fa:	401a      	ands	r2, r3
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	4313      	orrs	r3, r2
 8003500:	81a3      	strh	r3, [r4, #12]
 8003502:	9b02      	ldr	r3, [sp, #8]
 8003504:	6126      	str	r6, [r4, #16]
 8003506:	18f6      	adds	r6, r6, r3
 8003508:	6026      	str	r6, [r4, #0]
 800350a:	6165      	str	r5, [r4, #20]
 800350c:	9e01      	ldr	r6, [sp, #4]
 800350e:	1aed      	subs	r5, r5, r3
 8003510:	60a5      	str	r5, [r4, #8]
 8003512:	9b01      	ldr	r3, [sp, #4]
 8003514:	429e      	cmp	r6, r3
 8003516:	d900      	bls.n	800351a <__ssputs_r+0x8e>
 8003518:	9e01      	ldr	r6, [sp, #4]
 800351a:	0032      	movs	r2, r6
 800351c:	9903      	ldr	r1, [sp, #12]
 800351e:	6820      	ldr	r0, [r4, #0]
 8003520:	f000 faac 	bl	8003a7c <memmove>
 8003524:	68a3      	ldr	r3, [r4, #8]
 8003526:	2000      	movs	r0, #0
 8003528:	1b9b      	subs	r3, r3, r6
 800352a:	60a3      	str	r3, [r4, #8]
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	199e      	adds	r6, r3, r6
 8003530:	6026      	str	r6, [r4, #0]
 8003532:	e7da      	b.n	80034ea <__ssputs_r+0x5e>
 8003534:	002a      	movs	r2, r5
 8003536:	0038      	movs	r0, r7
 8003538:	f000 fb96 	bl	8003c68 <_realloc_r>
 800353c:	1e06      	subs	r6, r0, #0
 800353e:	d1e0      	bne.n	8003502 <__ssputs_r+0x76>
 8003540:	0038      	movs	r0, r7
 8003542:	6921      	ldr	r1, [r4, #16]
 8003544:	f000 faae 	bl	8003aa4 <_free_r>
 8003548:	e7c7      	b.n	80034da <__ssputs_r+0x4e>
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	fffffb7f 	.word	0xfffffb7f

08003550 <_svfiprintf_r>:
 8003550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003552:	b0a1      	sub	sp, #132	; 0x84
 8003554:	9003      	str	r0, [sp, #12]
 8003556:	001d      	movs	r5, r3
 8003558:	898b      	ldrh	r3, [r1, #12]
 800355a:	000f      	movs	r7, r1
 800355c:	0016      	movs	r6, r2
 800355e:	061b      	lsls	r3, r3, #24
 8003560:	d511      	bpl.n	8003586 <_svfiprintf_r+0x36>
 8003562:	690b      	ldr	r3, [r1, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10e      	bne.n	8003586 <_svfiprintf_r+0x36>
 8003568:	2140      	movs	r1, #64	; 0x40
 800356a:	f000 fb07 	bl	8003b7c <_malloc_r>
 800356e:	6038      	str	r0, [r7, #0]
 8003570:	6138      	str	r0, [r7, #16]
 8003572:	2800      	cmp	r0, #0
 8003574:	d105      	bne.n	8003582 <_svfiprintf_r+0x32>
 8003576:	230c      	movs	r3, #12
 8003578:	9a03      	ldr	r2, [sp, #12]
 800357a:	3801      	subs	r0, #1
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	b021      	add	sp, #132	; 0x84
 8003580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003582:	2340      	movs	r3, #64	; 0x40
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	2300      	movs	r3, #0
 8003588:	ac08      	add	r4, sp, #32
 800358a:	6163      	str	r3, [r4, #20]
 800358c:	3320      	adds	r3, #32
 800358e:	7663      	strb	r3, [r4, #25]
 8003590:	3310      	adds	r3, #16
 8003592:	76a3      	strb	r3, [r4, #26]
 8003594:	9507      	str	r5, [sp, #28]
 8003596:	0035      	movs	r5, r6
 8003598:	782b      	ldrb	r3, [r5, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <_svfiprintf_r+0x52>
 800359e:	2b25      	cmp	r3, #37	; 0x25
 80035a0:	d147      	bne.n	8003632 <_svfiprintf_r+0xe2>
 80035a2:	1bab      	subs	r3, r5, r6
 80035a4:	9305      	str	r3, [sp, #20]
 80035a6:	42b5      	cmp	r5, r6
 80035a8:	d00c      	beq.n	80035c4 <_svfiprintf_r+0x74>
 80035aa:	0032      	movs	r2, r6
 80035ac:	0039      	movs	r1, r7
 80035ae:	9803      	ldr	r0, [sp, #12]
 80035b0:	f7ff ff6c 	bl	800348c <__ssputs_r>
 80035b4:	1c43      	adds	r3, r0, #1
 80035b6:	d100      	bne.n	80035ba <_svfiprintf_r+0x6a>
 80035b8:	e0ae      	b.n	8003718 <_svfiprintf_r+0x1c8>
 80035ba:	6962      	ldr	r2, [r4, #20]
 80035bc:	9b05      	ldr	r3, [sp, #20]
 80035be:	4694      	mov	ip, r2
 80035c0:	4463      	add	r3, ip
 80035c2:	6163      	str	r3, [r4, #20]
 80035c4:	782b      	ldrb	r3, [r5, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d100      	bne.n	80035cc <_svfiprintf_r+0x7c>
 80035ca:	e0a5      	b.n	8003718 <_svfiprintf_r+0x1c8>
 80035cc:	2201      	movs	r2, #1
 80035ce:	2300      	movs	r3, #0
 80035d0:	4252      	negs	r2, r2
 80035d2:	6062      	str	r2, [r4, #4]
 80035d4:	a904      	add	r1, sp, #16
 80035d6:	3254      	adds	r2, #84	; 0x54
 80035d8:	1852      	adds	r2, r2, r1
 80035da:	1c6e      	adds	r6, r5, #1
 80035dc:	6023      	str	r3, [r4, #0]
 80035de:	60e3      	str	r3, [r4, #12]
 80035e0:	60a3      	str	r3, [r4, #8]
 80035e2:	7013      	strb	r3, [r2, #0]
 80035e4:	65a3      	str	r3, [r4, #88]	; 0x58
 80035e6:	2205      	movs	r2, #5
 80035e8:	7831      	ldrb	r1, [r6, #0]
 80035ea:	4854      	ldr	r0, [pc, #336]	; (800373c <_svfiprintf_r+0x1ec>)
 80035ec:	f000 fa32 	bl	8003a54 <memchr>
 80035f0:	1c75      	adds	r5, r6, #1
 80035f2:	2800      	cmp	r0, #0
 80035f4:	d11f      	bne.n	8003636 <_svfiprintf_r+0xe6>
 80035f6:	6822      	ldr	r2, [r4, #0]
 80035f8:	06d3      	lsls	r3, r2, #27
 80035fa:	d504      	bpl.n	8003606 <_svfiprintf_r+0xb6>
 80035fc:	2353      	movs	r3, #83	; 0x53
 80035fe:	a904      	add	r1, sp, #16
 8003600:	185b      	adds	r3, r3, r1
 8003602:	2120      	movs	r1, #32
 8003604:	7019      	strb	r1, [r3, #0]
 8003606:	0713      	lsls	r3, r2, #28
 8003608:	d504      	bpl.n	8003614 <_svfiprintf_r+0xc4>
 800360a:	2353      	movs	r3, #83	; 0x53
 800360c:	a904      	add	r1, sp, #16
 800360e:	185b      	adds	r3, r3, r1
 8003610:	212b      	movs	r1, #43	; 0x2b
 8003612:	7019      	strb	r1, [r3, #0]
 8003614:	7833      	ldrb	r3, [r6, #0]
 8003616:	2b2a      	cmp	r3, #42	; 0x2a
 8003618:	d016      	beq.n	8003648 <_svfiprintf_r+0xf8>
 800361a:	0035      	movs	r5, r6
 800361c:	2100      	movs	r1, #0
 800361e:	200a      	movs	r0, #10
 8003620:	68e3      	ldr	r3, [r4, #12]
 8003622:	782a      	ldrb	r2, [r5, #0]
 8003624:	1c6e      	adds	r6, r5, #1
 8003626:	3a30      	subs	r2, #48	; 0x30
 8003628:	2a09      	cmp	r2, #9
 800362a:	d94e      	bls.n	80036ca <_svfiprintf_r+0x17a>
 800362c:	2900      	cmp	r1, #0
 800362e:	d111      	bne.n	8003654 <_svfiprintf_r+0x104>
 8003630:	e017      	b.n	8003662 <_svfiprintf_r+0x112>
 8003632:	3501      	adds	r5, #1
 8003634:	e7b0      	b.n	8003598 <_svfiprintf_r+0x48>
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <_svfiprintf_r+0x1ec>)
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	1ac0      	subs	r0, r0, r3
 800363c:	2301      	movs	r3, #1
 800363e:	4083      	lsls	r3, r0
 8003640:	4313      	orrs	r3, r2
 8003642:	002e      	movs	r6, r5
 8003644:	6023      	str	r3, [r4, #0]
 8003646:	e7ce      	b.n	80035e6 <_svfiprintf_r+0x96>
 8003648:	9b07      	ldr	r3, [sp, #28]
 800364a:	1d19      	adds	r1, r3, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	9107      	str	r1, [sp, #28]
 8003650:	2b00      	cmp	r3, #0
 8003652:	db01      	blt.n	8003658 <_svfiprintf_r+0x108>
 8003654:	930b      	str	r3, [sp, #44]	; 0x2c
 8003656:	e004      	b.n	8003662 <_svfiprintf_r+0x112>
 8003658:	425b      	negs	r3, r3
 800365a:	60e3      	str	r3, [r4, #12]
 800365c:	2302      	movs	r3, #2
 800365e:	4313      	orrs	r3, r2
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	782b      	ldrb	r3, [r5, #0]
 8003664:	2b2e      	cmp	r3, #46	; 0x2e
 8003666:	d10a      	bne.n	800367e <_svfiprintf_r+0x12e>
 8003668:	786b      	ldrb	r3, [r5, #1]
 800366a:	2b2a      	cmp	r3, #42	; 0x2a
 800366c:	d135      	bne.n	80036da <_svfiprintf_r+0x18a>
 800366e:	9b07      	ldr	r3, [sp, #28]
 8003670:	3502      	adds	r5, #2
 8003672:	1d1a      	adds	r2, r3, #4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	9207      	str	r2, [sp, #28]
 8003678:	2b00      	cmp	r3, #0
 800367a:	db2b      	blt.n	80036d4 <_svfiprintf_r+0x184>
 800367c:	9309      	str	r3, [sp, #36]	; 0x24
 800367e:	4e30      	ldr	r6, [pc, #192]	; (8003740 <_svfiprintf_r+0x1f0>)
 8003680:	2203      	movs	r2, #3
 8003682:	0030      	movs	r0, r6
 8003684:	7829      	ldrb	r1, [r5, #0]
 8003686:	f000 f9e5 	bl	8003a54 <memchr>
 800368a:	2800      	cmp	r0, #0
 800368c:	d006      	beq.n	800369c <_svfiprintf_r+0x14c>
 800368e:	2340      	movs	r3, #64	; 0x40
 8003690:	1b80      	subs	r0, r0, r6
 8003692:	4083      	lsls	r3, r0
 8003694:	6822      	ldr	r2, [r4, #0]
 8003696:	3501      	adds	r5, #1
 8003698:	4313      	orrs	r3, r2
 800369a:	6023      	str	r3, [r4, #0]
 800369c:	7829      	ldrb	r1, [r5, #0]
 800369e:	2206      	movs	r2, #6
 80036a0:	4828      	ldr	r0, [pc, #160]	; (8003744 <_svfiprintf_r+0x1f4>)
 80036a2:	1c6e      	adds	r6, r5, #1
 80036a4:	7621      	strb	r1, [r4, #24]
 80036a6:	f000 f9d5 	bl	8003a54 <memchr>
 80036aa:	2800      	cmp	r0, #0
 80036ac:	d03c      	beq.n	8003728 <_svfiprintf_r+0x1d8>
 80036ae:	4b26      	ldr	r3, [pc, #152]	; (8003748 <_svfiprintf_r+0x1f8>)
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d125      	bne.n	8003700 <_svfiprintf_r+0x1b0>
 80036b4:	2207      	movs	r2, #7
 80036b6:	9b07      	ldr	r3, [sp, #28]
 80036b8:	3307      	adds	r3, #7
 80036ba:	4393      	bics	r3, r2
 80036bc:	3308      	adds	r3, #8
 80036be:	9307      	str	r3, [sp, #28]
 80036c0:	6963      	ldr	r3, [r4, #20]
 80036c2:	9a04      	ldr	r2, [sp, #16]
 80036c4:	189b      	adds	r3, r3, r2
 80036c6:	6163      	str	r3, [r4, #20]
 80036c8:	e765      	b.n	8003596 <_svfiprintf_r+0x46>
 80036ca:	4343      	muls	r3, r0
 80036cc:	0035      	movs	r5, r6
 80036ce:	2101      	movs	r1, #1
 80036d0:	189b      	adds	r3, r3, r2
 80036d2:	e7a6      	b.n	8003622 <_svfiprintf_r+0xd2>
 80036d4:	2301      	movs	r3, #1
 80036d6:	425b      	negs	r3, r3
 80036d8:	e7d0      	b.n	800367c <_svfiprintf_r+0x12c>
 80036da:	2300      	movs	r3, #0
 80036dc:	200a      	movs	r0, #10
 80036de:	001a      	movs	r2, r3
 80036e0:	3501      	adds	r5, #1
 80036e2:	6063      	str	r3, [r4, #4]
 80036e4:	7829      	ldrb	r1, [r5, #0]
 80036e6:	1c6e      	adds	r6, r5, #1
 80036e8:	3930      	subs	r1, #48	; 0x30
 80036ea:	2909      	cmp	r1, #9
 80036ec:	d903      	bls.n	80036f6 <_svfiprintf_r+0x1a6>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0c5      	beq.n	800367e <_svfiprintf_r+0x12e>
 80036f2:	9209      	str	r2, [sp, #36]	; 0x24
 80036f4:	e7c3      	b.n	800367e <_svfiprintf_r+0x12e>
 80036f6:	4342      	muls	r2, r0
 80036f8:	0035      	movs	r5, r6
 80036fa:	2301      	movs	r3, #1
 80036fc:	1852      	adds	r2, r2, r1
 80036fe:	e7f1      	b.n	80036e4 <_svfiprintf_r+0x194>
 8003700:	ab07      	add	r3, sp, #28
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	003a      	movs	r2, r7
 8003706:	0021      	movs	r1, r4
 8003708:	4b10      	ldr	r3, [pc, #64]	; (800374c <_svfiprintf_r+0x1fc>)
 800370a:	9803      	ldr	r0, [sp, #12]
 800370c:	e000      	b.n	8003710 <_svfiprintf_r+0x1c0>
 800370e:	bf00      	nop
 8003710:	9004      	str	r0, [sp, #16]
 8003712:	9b04      	ldr	r3, [sp, #16]
 8003714:	3301      	adds	r3, #1
 8003716:	d1d3      	bne.n	80036c0 <_svfiprintf_r+0x170>
 8003718:	89bb      	ldrh	r3, [r7, #12]
 800371a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800371c:	065b      	lsls	r3, r3, #25
 800371e:	d400      	bmi.n	8003722 <_svfiprintf_r+0x1d2>
 8003720:	e72d      	b.n	800357e <_svfiprintf_r+0x2e>
 8003722:	2001      	movs	r0, #1
 8003724:	4240      	negs	r0, r0
 8003726:	e72a      	b.n	800357e <_svfiprintf_r+0x2e>
 8003728:	ab07      	add	r3, sp, #28
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	003a      	movs	r2, r7
 800372e:	0021      	movs	r1, r4
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <_svfiprintf_r+0x1fc>)
 8003732:	9803      	ldr	r0, [sp, #12]
 8003734:	f000 f87c 	bl	8003830 <_printf_i>
 8003738:	e7ea      	b.n	8003710 <_svfiprintf_r+0x1c0>
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	08003df4 	.word	0x08003df4
 8003740:	08003dfa 	.word	0x08003dfa
 8003744:	08003dfe 	.word	0x08003dfe
 8003748:	00000000 	.word	0x00000000
 800374c:	0800348d 	.word	0x0800348d

08003750 <_printf_common>:
 8003750:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003752:	0015      	movs	r5, r2
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	688a      	ldr	r2, [r1, #8]
 8003758:	690b      	ldr	r3, [r1, #16]
 800375a:	000c      	movs	r4, r1
 800375c:	9000      	str	r0, [sp, #0]
 800375e:	4293      	cmp	r3, r2
 8003760:	da00      	bge.n	8003764 <_printf_common+0x14>
 8003762:	0013      	movs	r3, r2
 8003764:	0022      	movs	r2, r4
 8003766:	602b      	str	r3, [r5, #0]
 8003768:	3243      	adds	r2, #67	; 0x43
 800376a:	7812      	ldrb	r2, [r2, #0]
 800376c:	2a00      	cmp	r2, #0
 800376e:	d001      	beq.n	8003774 <_printf_common+0x24>
 8003770:	3301      	adds	r3, #1
 8003772:	602b      	str	r3, [r5, #0]
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	069b      	lsls	r3, r3, #26
 8003778:	d502      	bpl.n	8003780 <_printf_common+0x30>
 800377a:	682b      	ldr	r3, [r5, #0]
 800377c:	3302      	adds	r3, #2
 800377e:	602b      	str	r3, [r5, #0]
 8003780:	6822      	ldr	r2, [r4, #0]
 8003782:	2306      	movs	r3, #6
 8003784:	0017      	movs	r7, r2
 8003786:	401f      	ands	r7, r3
 8003788:	421a      	tst	r2, r3
 800378a:	d027      	beq.n	80037dc <_printf_common+0x8c>
 800378c:	0023      	movs	r3, r4
 800378e:	3343      	adds	r3, #67	; 0x43
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	1e5a      	subs	r2, r3, #1
 8003794:	4193      	sbcs	r3, r2
 8003796:	6822      	ldr	r2, [r4, #0]
 8003798:	0692      	lsls	r2, r2, #26
 800379a:	d430      	bmi.n	80037fe <_printf_common+0xae>
 800379c:	0022      	movs	r2, r4
 800379e:	9901      	ldr	r1, [sp, #4]
 80037a0:	9800      	ldr	r0, [sp, #0]
 80037a2:	9e08      	ldr	r6, [sp, #32]
 80037a4:	3243      	adds	r2, #67	; 0x43
 80037a6:	47b0      	blx	r6
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d025      	beq.n	80037f8 <_printf_common+0xa8>
 80037ac:	2306      	movs	r3, #6
 80037ae:	6820      	ldr	r0, [r4, #0]
 80037b0:	682a      	ldr	r2, [r5, #0]
 80037b2:	68e1      	ldr	r1, [r4, #12]
 80037b4:	2500      	movs	r5, #0
 80037b6:	4003      	ands	r3, r0
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d103      	bne.n	80037c4 <_printf_common+0x74>
 80037bc:	1a8d      	subs	r5, r1, r2
 80037be:	43eb      	mvns	r3, r5
 80037c0:	17db      	asrs	r3, r3, #31
 80037c2:	401d      	ands	r5, r3
 80037c4:	68a3      	ldr	r3, [r4, #8]
 80037c6:	6922      	ldr	r2, [r4, #16]
 80037c8:	4293      	cmp	r3, r2
 80037ca:	dd01      	ble.n	80037d0 <_printf_common+0x80>
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	18ed      	adds	r5, r5, r3
 80037d0:	2700      	movs	r7, #0
 80037d2:	42bd      	cmp	r5, r7
 80037d4:	d120      	bne.n	8003818 <_printf_common+0xc8>
 80037d6:	2000      	movs	r0, #0
 80037d8:	e010      	b.n	80037fc <_printf_common+0xac>
 80037da:	3701      	adds	r7, #1
 80037dc:	68e3      	ldr	r3, [r4, #12]
 80037de:	682a      	ldr	r2, [r5, #0]
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	42bb      	cmp	r3, r7
 80037e4:	ddd2      	ble.n	800378c <_printf_common+0x3c>
 80037e6:	0022      	movs	r2, r4
 80037e8:	2301      	movs	r3, #1
 80037ea:	9901      	ldr	r1, [sp, #4]
 80037ec:	9800      	ldr	r0, [sp, #0]
 80037ee:	9e08      	ldr	r6, [sp, #32]
 80037f0:	3219      	adds	r2, #25
 80037f2:	47b0      	blx	r6
 80037f4:	1c43      	adds	r3, r0, #1
 80037f6:	d1f0      	bne.n	80037da <_printf_common+0x8a>
 80037f8:	2001      	movs	r0, #1
 80037fa:	4240      	negs	r0, r0
 80037fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037fe:	2030      	movs	r0, #48	; 0x30
 8003800:	18e1      	adds	r1, r4, r3
 8003802:	3143      	adds	r1, #67	; 0x43
 8003804:	7008      	strb	r0, [r1, #0]
 8003806:	0021      	movs	r1, r4
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	3145      	adds	r1, #69	; 0x45
 800380c:	7809      	ldrb	r1, [r1, #0]
 800380e:	18a2      	adds	r2, r4, r2
 8003810:	3243      	adds	r2, #67	; 0x43
 8003812:	3302      	adds	r3, #2
 8003814:	7011      	strb	r1, [r2, #0]
 8003816:	e7c1      	b.n	800379c <_printf_common+0x4c>
 8003818:	0022      	movs	r2, r4
 800381a:	2301      	movs	r3, #1
 800381c:	9901      	ldr	r1, [sp, #4]
 800381e:	9800      	ldr	r0, [sp, #0]
 8003820:	9e08      	ldr	r6, [sp, #32]
 8003822:	321a      	adds	r2, #26
 8003824:	47b0      	blx	r6
 8003826:	1c43      	adds	r3, r0, #1
 8003828:	d0e6      	beq.n	80037f8 <_printf_common+0xa8>
 800382a:	3701      	adds	r7, #1
 800382c:	e7d1      	b.n	80037d2 <_printf_common+0x82>
	...

08003830 <_printf_i>:
 8003830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003832:	b08b      	sub	sp, #44	; 0x2c
 8003834:	9206      	str	r2, [sp, #24]
 8003836:	000a      	movs	r2, r1
 8003838:	3243      	adds	r2, #67	; 0x43
 800383a:	9307      	str	r3, [sp, #28]
 800383c:	9005      	str	r0, [sp, #20]
 800383e:	9204      	str	r2, [sp, #16]
 8003840:	7e0a      	ldrb	r2, [r1, #24]
 8003842:	000c      	movs	r4, r1
 8003844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003846:	2a78      	cmp	r2, #120	; 0x78
 8003848:	d807      	bhi.n	800385a <_printf_i+0x2a>
 800384a:	2a62      	cmp	r2, #98	; 0x62
 800384c:	d809      	bhi.n	8003862 <_printf_i+0x32>
 800384e:	2a00      	cmp	r2, #0
 8003850:	d100      	bne.n	8003854 <_printf_i+0x24>
 8003852:	e0c1      	b.n	80039d8 <_printf_i+0x1a8>
 8003854:	2a58      	cmp	r2, #88	; 0x58
 8003856:	d100      	bne.n	800385a <_printf_i+0x2a>
 8003858:	e08c      	b.n	8003974 <_printf_i+0x144>
 800385a:	0026      	movs	r6, r4
 800385c:	3642      	adds	r6, #66	; 0x42
 800385e:	7032      	strb	r2, [r6, #0]
 8003860:	e022      	b.n	80038a8 <_printf_i+0x78>
 8003862:	0010      	movs	r0, r2
 8003864:	3863      	subs	r0, #99	; 0x63
 8003866:	2815      	cmp	r0, #21
 8003868:	d8f7      	bhi.n	800385a <_printf_i+0x2a>
 800386a:	f7fc fc53 	bl	8000114 <__gnu_thumb1_case_shi>
 800386e:	0016      	.short	0x0016
 8003870:	fff6001f 	.word	0xfff6001f
 8003874:	fff6fff6 	.word	0xfff6fff6
 8003878:	001ffff6 	.word	0x001ffff6
 800387c:	fff6fff6 	.word	0xfff6fff6
 8003880:	fff6fff6 	.word	0xfff6fff6
 8003884:	003600a8 	.word	0x003600a8
 8003888:	fff6009a 	.word	0xfff6009a
 800388c:	00b9fff6 	.word	0x00b9fff6
 8003890:	0036fff6 	.word	0x0036fff6
 8003894:	fff6fff6 	.word	0xfff6fff6
 8003898:	009e      	.short	0x009e
 800389a:	0026      	movs	r6, r4
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	3642      	adds	r6, #66	; 0x42
 80038a0:	1d11      	adds	r1, r2, #4
 80038a2:	6019      	str	r1, [r3, #0]
 80038a4:	6813      	ldr	r3, [r2, #0]
 80038a6:	7033      	strb	r3, [r6, #0]
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0a7      	b.n	80039fc <_printf_i+0x1cc>
 80038ac:	6808      	ldr	r0, [r1, #0]
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	1d0a      	adds	r2, r1, #4
 80038b2:	0605      	lsls	r5, r0, #24
 80038b4:	d50b      	bpl.n	80038ce <_printf_i+0x9e>
 80038b6:	680d      	ldr	r5, [r1, #0]
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	2d00      	cmp	r5, #0
 80038bc:	da03      	bge.n	80038c6 <_printf_i+0x96>
 80038be:	232d      	movs	r3, #45	; 0x2d
 80038c0:	9a04      	ldr	r2, [sp, #16]
 80038c2:	426d      	negs	r5, r5
 80038c4:	7013      	strb	r3, [r2, #0]
 80038c6:	4b61      	ldr	r3, [pc, #388]	; (8003a4c <_printf_i+0x21c>)
 80038c8:	270a      	movs	r7, #10
 80038ca:	9303      	str	r3, [sp, #12]
 80038cc:	e01b      	b.n	8003906 <_printf_i+0xd6>
 80038ce:	680d      	ldr	r5, [r1, #0]
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	0641      	lsls	r1, r0, #25
 80038d4:	d5f1      	bpl.n	80038ba <_printf_i+0x8a>
 80038d6:	b22d      	sxth	r5, r5
 80038d8:	e7ef      	b.n	80038ba <_printf_i+0x8a>
 80038da:	680d      	ldr	r5, [r1, #0]
 80038dc:	6819      	ldr	r1, [r3, #0]
 80038de:	1d08      	adds	r0, r1, #4
 80038e0:	6018      	str	r0, [r3, #0]
 80038e2:	062e      	lsls	r6, r5, #24
 80038e4:	d501      	bpl.n	80038ea <_printf_i+0xba>
 80038e6:	680d      	ldr	r5, [r1, #0]
 80038e8:	e003      	b.n	80038f2 <_printf_i+0xc2>
 80038ea:	066d      	lsls	r5, r5, #25
 80038ec:	d5fb      	bpl.n	80038e6 <_printf_i+0xb6>
 80038ee:	680d      	ldr	r5, [r1, #0]
 80038f0:	b2ad      	uxth	r5, r5
 80038f2:	4b56      	ldr	r3, [pc, #344]	; (8003a4c <_printf_i+0x21c>)
 80038f4:	2708      	movs	r7, #8
 80038f6:	9303      	str	r3, [sp, #12]
 80038f8:	2a6f      	cmp	r2, #111	; 0x6f
 80038fa:	d000      	beq.n	80038fe <_printf_i+0xce>
 80038fc:	3702      	adds	r7, #2
 80038fe:	0023      	movs	r3, r4
 8003900:	2200      	movs	r2, #0
 8003902:	3343      	adds	r3, #67	; 0x43
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	6863      	ldr	r3, [r4, #4]
 8003908:	60a3      	str	r3, [r4, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	db03      	blt.n	8003916 <_printf_i+0xe6>
 800390e:	2204      	movs	r2, #4
 8003910:	6821      	ldr	r1, [r4, #0]
 8003912:	4391      	bics	r1, r2
 8003914:	6021      	str	r1, [r4, #0]
 8003916:	2d00      	cmp	r5, #0
 8003918:	d102      	bne.n	8003920 <_printf_i+0xf0>
 800391a:	9e04      	ldr	r6, [sp, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00c      	beq.n	800393a <_printf_i+0x10a>
 8003920:	9e04      	ldr	r6, [sp, #16]
 8003922:	0028      	movs	r0, r5
 8003924:	0039      	movs	r1, r7
 8003926:	f7fc fc85 	bl	8000234 <__aeabi_uidivmod>
 800392a:	9b03      	ldr	r3, [sp, #12]
 800392c:	3e01      	subs	r6, #1
 800392e:	5c5b      	ldrb	r3, [r3, r1]
 8003930:	7033      	strb	r3, [r6, #0]
 8003932:	002b      	movs	r3, r5
 8003934:	0005      	movs	r5, r0
 8003936:	429f      	cmp	r7, r3
 8003938:	d9f3      	bls.n	8003922 <_printf_i+0xf2>
 800393a:	2f08      	cmp	r7, #8
 800393c:	d109      	bne.n	8003952 <_printf_i+0x122>
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	07db      	lsls	r3, r3, #31
 8003942:	d506      	bpl.n	8003952 <_printf_i+0x122>
 8003944:	6863      	ldr	r3, [r4, #4]
 8003946:	6922      	ldr	r2, [r4, #16]
 8003948:	4293      	cmp	r3, r2
 800394a:	dc02      	bgt.n	8003952 <_printf_i+0x122>
 800394c:	2330      	movs	r3, #48	; 0x30
 800394e:	3e01      	subs	r6, #1
 8003950:	7033      	strb	r3, [r6, #0]
 8003952:	9b04      	ldr	r3, [sp, #16]
 8003954:	1b9b      	subs	r3, r3, r6
 8003956:	6123      	str	r3, [r4, #16]
 8003958:	9b07      	ldr	r3, [sp, #28]
 800395a:	0021      	movs	r1, r4
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	9805      	ldr	r0, [sp, #20]
 8003960:	9b06      	ldr	r3, [sp, #24]
 8003962:	aa09      	add	r2, sp, #36	; 0x24
 8003964:	f7ff fef4 	bl	8003750 <_printf_common>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d14c      	bne.n	8003a06 <_printf_i+0x1d6>
 800396c:	2001      	movs	r0, #1
 800396e:	4240      	negs	r0, r0
 8003970:	b00b      	add	sp, #44	; 0x2c
 8003972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003974:	3145      	adds	r1, #69	; 0x45
 8003976:	700a      	strb	r2, [r1, #0]
 8003978:	4a34      	ldr	r2, [pc, #208]	; (8003a4c <_printf_i+0x21c>)
 800397a:	9203      	str	r2, [sp, #12]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	6821      	ldr	r1, [r4, #0]
 8003980:	ca20      	ldmia	r2!, {r5}
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	0608      	lsls	r0, r1, #24
 8003986:	d516      	bpl.n	80039b6 <_printf_i+0x186>
 8003988:	07cb      	lsls	r3, r1, #31
 800398a:	d502      	bpl.n	8003992 <_printf_i+0x162>
 800398c:	2320      	movs	r3, #32
 800398e:	4319      	orrs	r1, r3
 8003990:	6021      	str	r1, [r4, #0]
 8003992:	2710      	movs	r7, #16
 8003994:	2d00      	cmp	r5, #0
 8003996:	d1b2      	bne.n	80038fe <_printf_i+0xce>
 8003998:	2320      	movs	r3, #32
 800399a:	6822      	ldr	r2, [r4, #0]
 800399c:	439a      	bics	r2, r3
 800399e:	6022      	str	r2, [r4, #0]
 80039a0:	e7ad      	b.n	80038fe <_printf_i+0xce>
 80039a2:	2220      	movs	r2, #32
 80039a4:	6809      	ldr	r1, [r1, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	6022      	str	r2, [r4, #0]
 80039aa:	0022      	movs	r2, r4
 80039ac:	2178      	movs	r1, #120	; 0x78
 80039ae:	3245      	adds	r2, #69	; 0x45
 80039b0:	7011      	strb	r1, [r2, #0]
 80039b2:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <_printf_i+0x220>)
 80039b4:	e7e1      	b.n	800397a <_printf_i+0x14a>
 80039b6:	0648      	lsls	r0, r1, #25
 80039b8:	d5e6      	bpl.n	8003988 <_printf_i+0x158>
 80039ba:	b2ad      	uxth	r5, r5
 80039bc:	e7e4      	b.n	8003988 <_printf_i+0x158>
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	680d      	ldr	r5, [r1, #0]
 80039c2:	1d10      	adds	r0, r2, #4
 80039c4:	6949      	ldr	r1, [r1, #20]
 80039c6:	6018      	str	r0, [r3, #0]
 80039c8:	6813      	ldr	r3, [r2, #0]
 80039ca:	062e      	lsls	r6, r5, #24
 80039cc:	d501      	bpl.n	80039d2 <_printf_i+0x1a2>
 80039ce:	6019      	str	r1, [r3, #0]
 80039d0:	e002      	b.n	80039d8 <_printf_i+0x1a8>
 80039d2:	066d      	lsls	r5, r5, #25
 80039d4:	d5fb      	bpl.n	80039ce <_printf_i+0x19e>
 80039d6:	8019      	strh	r1, [r3, #0]
 80039d8:	2300      	movs	r3, #0
 80039da:	9e04      	ldr	r6, [sp, #16]
 80039dc:	6123      	str	r3, [r4, #16]
 80039de:	e7bb      	b.n	8003958 <_printf_i+0x128>
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	1d11      	adds	r1, r2, #4
 80039e4:	6019      	str	r1, [r3, #0]
 80039e6:	6816      	ldr	r6, [r2, #0]
 80039e8:	2100      	movs	r1, #0
 80039ea:	0030      	movs	r0, r6
 80039ec:	6862      	ldr	r2, [r4, #4]
 80039ee:	f000 f831 	bl	8003a54 <memchr>
 80039f2:	2800      	cmp	r0, #0
 80039f4:	d001      	beq.n	80039fa <_printf_i+0x1ca>
 80039f6:	1b80      	subs	r0, r0, r6
 80039f8:	6060      	str	r0, [r4, #4]
 80039fa:	6863      	ldr	r3, [r4, #4]
 80039fc:	6123      	str	r3, [r4, #16]
 80039fe:	2300      	movs	r3, #0
 8003a00:	9a04      	ldr	r2, [sp, #16]
 8003a02:	7013      	strb	r3, [r2, #0]
 8003a04:	e7a8      	b.n	8003958 <_printf_i+0x128>
 8003a06:	6923      	ldr	r3, [r4, #16]
 8003a08:	0032      	movs	r2, r6
 8003a0a:	9906      	ldr	r1, [sp, #24]
 8003a0c:	9805      	ldr	r0, [sp, #20]
 8003a0e:	9d07      	ldr	r5, [sp, #28]
 8003a10:	47a8      	blx	r5
 8003a12:	1c43      	adds	r3, r0, #1
 8003a14:	d0aa      	beq.n	800396c <_printf_i+0x13c>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	079b      	lsls	r3, r3, #30
 8003a1a:	d415      	bmi.n	8003a48 <_printf_i+0x218>
 8003a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a1e:	68e0      	ldr	r0, [r4, #12]
 8003a20:	4298      	cmp	r0, r3
 8003a22:	daa5      	bge.n	8003970 <_printf_i+0x140>
 8003a24:	0018      	movs	r0, r3
 8003a26:	e7a3      	b.n	8003970 <_printf_i+0x140>
 8003a28:	0022      	movs	r2, r4
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	9906      	ldr	r1, [sp, #24]
 8003a2e:	9805      	ldr	r0, [sp, #20]
 8003a30:	9e07      	ldr	r6, [sp, #28]
 8003a32:	3219      	adds	r2, #25
 8003a34:	47b0      	blx	r6
 8003a36:	1c43      	adds	r3, r0, #1
 8003a38:	d098      	beq.n	800396c <_printf_i+0x13c>
 8003a3a:	3501      	adds	r5, #1
 8003a3c:	68e3      	ldr	r3, [r4, #12]
 8003a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	42ab      	cmp	r3, r5
 8003a44:	dcf0      	bgt.n	8003a28 <_printf_i+0x1f8>
 8003a46:	e7e9      	b.n	8003a1c <_printf_i+0x1ec>
 8003a48:	2500      	movs	r5, #0
 8003a4a:	e7f7      	b.n	8003a3c <_printf_i+0x20c>
 8003a4c:	08003e05 	.word	0x08003e05
 8003a50:	08003e16 	.word	0x08003e16

08003a54 <memchr>:
 8003a54:	b2c9      	uxtb	r1, r1
 8003a56:	1882      	adds	r2, r0, r2
 8003a58:	4290      	cmp	r0, r2
 8003a5a:	d101      	bne.n	8003a60 <memchr+0xc>
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	4770      	bx	lr
 8003a60:	7803      	ldrb	r3, [r0, #0]
 8003a62:	428b      	cmp	r3, r1
 8003a64:	d0fb      	beq.n	8003a5e <memchr+0xa>
 8003a66:	3001      	adds	r0, #1
 8003a68:	e7f6      	b.n	8003a58 <memchr+0x4>

08003a6a <memcpy>:
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	b510      	push	{r4, lr}
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d100      	bne.n	8003a74 <memcpy+0xa>
 8003a72:	bd10      	pop	{r4, pc}
 8003a74:	5ccc      	ldrb	r4, [r1, r3]
 8003a76:	54c4      	strb	r4, [r0, r3]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	e7f8      	b.n	8003a6e <memcpy+0x4>

08003a7c <memmove>:
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	4288      	cmp	r0, r1
 8003a80:	d902      	bls.n	8003a88 <memmove+0xc>
 8003a82:	188b      	adds	r3, r1, r2
 8003a84:	4298      	cmp	r0, r3
 8003a86:	d303      	bcc.n	8003a90 <memmove+0x14>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e007      	b.n	8003a9c <memmove+0x20>
 8003a8c:	5c8b      	ldrb	r3, [r1, r2]
 8003a8e:	5483      	strb	r3, [r0, r2]
 8003a90:	3a01      	subs	r2, #1
 8003a92:	d2fb      	bcs.n	8003a8c <memmove+0x10>
 8003a94:	bd10      	pop	{r4, pc}
 8003a96:	5ccc      	ldrb	r4, [r1, r3]
 8003a98:	54c4      	strb	r4, [r0, r3]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1fa      	bne.n	8003a96 <memmove+0x1a>
 8003aa0:	e7f8      	b.n	8003a94 <memmove+0x18>
	...

08003aa4 <_free_r>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	0005      	movs	r5, r0
 8003aa8:	2900      	cmp	r1, #0
 8003aaa:	d010      	beq.n	8003ace <_free_r+0x2a>
 8003aac:	1f0c      	subs	r4, r1, #4
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	da00      	bge.n	8003ab6 <_free_r+0x12>
 8003ab4:	18e4      	adds	r4, r4, r3
 8003ab6:	0028      	movs	r0, r5
 8003ab8:	f000 f918 	bl	8003cec <__malloc_lock>
 8003abc:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <_free_r+0x90>)
 8003abe:	6813      	ldr	r3, [r2, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d105      	bne.n	8003ad0 <_free_r+0x2c>
 8003ac4:	6063      	str	r3, [r4, #4]
 8003ac6:	6014      	str	r4, [r2, #0]
 8003ac8:	0028      	movs	r0, r5
 8003aca:	f000 f917 	bl	8003cfc <__malloc_unlock>
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	42a3      	cmp	r3, r4
 8003ad2:	d908      	bls.n	8003ae6 <_free_r+0x42>
 8003ad4:	6821      	ldr	r1, [r4, #0]
 8003ad6:	1860      	adds	r0, r4, r1
 8003ad8:	4283      	cmp	r3, r0
 8003ada:	d1f3      	bne.n	8003ac4 <_free_r+0x20>
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	1841      	adds	r1, r0, r1
 8003ae2:	6021      	str	r1, [r4, #0]
 8003ae4:	e7ee      	b.n	8003ac4 <_free_r+0x20>
 8003ae6:	001a      	movs	r2, r3
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <_free_r+0x4e>
 8003aee:	42a3      	cmp	r3, r4
 8003af0:	d9f9      	bls.n	8003ae6 <_free_r+0x42>
 8003af2:	6811      	ldr	r1, [r2, #0]
 8003af4:	1850      	adds	r0, r2, r1
 8003af6:	42a0      	cmp	r0, r4
 8003af8:	d10b      	bne.n	8003b12 <_free_r+0x6e>
 8003afa:	6820      	ldr	r0, [r4, #0]
 8003afc:	1809      	adds	r1, r1, r0
 8003afe:	1850      	adds	r0, r2, r1
 8003b00:	6011      	str	r1, [r2, #0]
 8003b02:	4283      	cmp	r3, r0
 8003b04:	d1e0      	bne.n	8003ac8 <_free_r+0x24>
 8003b06:	6818      	ldr	r0, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	1841      	adds	r1, r0, r1
 8003b0c:	6011      	str	r1, [r2, #0]
 8003b0e:	6053      	str	r3, [r2, #4]
 8003b10:	e7da      	b.n	8003ac8 <_free_r+0x24>
 8003b12:	42a0      	cmp	r0, r4
 8003b14:	d902      	bls.n	8003b1c <_free_r+0x78>
 8003b16:	230c      	movs	r3, #12
 8003b18:	602b      	str	r3, [r5, #0]
 8003b1a:	e7d5      	b.n	8003ac8 <_free_r+0x24>
 8003b1c:	6821      	ldr	r1, [r4, #0]
 8003b1e:	1860      	adds	r0, r4, r1
 8003b20:	4283      	cmp	r3, r0
 8003b22:	d103      	bne.n	8003b2c <_free_r+0x88>
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	1841      	adds	r1, r0, r1
 8003b2a:	6021      	str	r1, [r4, #0]
 8003b2c:	6063      	str	r3, [r4, #4]
 8003b2e:	6054      	str	r4, [r2, #4]
 8003b30:	e7ca      	b.n	8003ac8 <_free_r+0x24>
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	2000020c 	.word	0x2000020c

08003b38 <sbrk_aligned>:
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	4e0f      	ldr	r6, [pc, #60]	; (8003b78 <sbrk_aligned+0x40>)
 8003b3c:	000d      	movs	r5, r1
 8003b3e:	6831      	ldr	r1, [r6, #0]
 8003b40:	0004      	movs	r4, r0
 8003b42:	2900      	cmp	r1, #0
 8003b44:	d102      	bne.n	8003b4c <sbrk_aligned+0x14>
 8003b46:	f000 f8bf 	bl	8003cc8 <_sbrk_r>
 8003b4a:	6030      	str	r0, [r6, #0]
 8003b4c:	0029      	movs	r1, r5
 8003b4e:	0020      	movs	r0, r4
 8003b50:	f000 f8ba 	bl	8003cc8 <_sbrk_r>
 8003b54:	1c43      	adds	r3, r0, #1
 8003b56:	d00a      	beq.n	8003b6e <sbrk_aligned+0x36>
 8003b58:	2303      	movs	r3, #3
 8003b5a:	1cc5      	adds	r5, r0, #3
 8003b5c:	439d      	bics	r5, r3
 8003b5e:	42a8      	cmp	r0, r5
 8003b60:	d007      	beq.n	8003b72 <sbrk_aligned+0x3a>
 8003b62:	1a29      	subs	r1, r5, r0
 8003b64:	0020      	movs	r0, r4
 8003b66:	f000 f8af 	bl	8003cc8 <_sbrk_r>
 8003b6a:	1c43      	adds	r3, r0, #1
 8003b6c:	d101      	bne.n	8003b72 <sbrk_aligned+0x3a>
 8003b6e:	2501      	movs	r5, #1
 8003b70:	426d      	negs	r5, r5
 8003b72:	0028      	movs	r0, r5
 8003b74:	bd70      	pop	{r4, r5, r6, pc}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	20000210 	.word	0x20000210

08003b7c <_malloc_r>:
 8003b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b7e:	2203      	movs	r2, #3
 8003b80:	1ccb      	adds	r3, r1, #3
 8003b82:	4393      	bics	r3, r2
 8003b84:	3308      	adds	r3, #8
 8003b86:	0006      	movs	r6, r0
 8003b88:	001f      	movs	r7, r3
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d232      	bcs.n	8003bf4 <_malloc_r+0x78>
 8003b8e:	270c      	movs	r7, #12
 8003b90:	42b9      	cmp	r1, r7
 8003b92:	d831      	bhi.n	8003bf8 <_malloc_r+0x7c>
 8003b94:	0030      	movs	r0, r6
 8003b96:	f000 f8a9 	bl	8003cec <__malloc_lock>
 8003b9a:	4d32      	ldr	r5, [pc, #200]	; (8003c64 <_malloc_r+0xe8>)
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	001c      	movs	r4, r3
 8003ba0:	2c00      	cmp	r4, #0
 8003ba2:	d12e      	bne.n	8003c02 <_malloc_r+0x86>
 8003ba4:	0039      	movs	r1, r7
 8003ba6:	0030      	movs	r0, r6
 8003ba8:	f7ff ffc6 	bl	8003b38 <sbrk_aligned>
 8003bac:	0004      	movs	r4, r0
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	d11e      	bne.n	8003bf0 <_malloc_r+0x74>
 8003bb2:	682c      	ldr	r4, [r5, #0]
 8003bb4:	0025      	movs	r5, r4
 8003bb6:	2d00      	cmp	r5, #0
 8003bb8:	d14a      	bne.n	8003c50 <_malloc_r+0xd4>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	0029      	movs	r1, r5
 8003bbe:	18e3      	adds	r3, r4, r3
 8003bc0:	0030      	movs	r0, r6
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	f000 f880 	bl	8003cc8 <_sbrk_r>
 8003bc8:	9b01      	ldr	r3, [sp, #4]
 8003bca:	4283      	cmp	r3, r0
 8003bcc:	d143      	bne.n	8003c56 <_malloc_r+0xda>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	3703      	adds	r7, #3
 8003bd2:	1aff      	subs	r7, r7, r3
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	439f      	bics	r7, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	2f0c      	cmp	r7, #12
 8003bdc:	d200      	bcs.n	8003be0 <_malloc_r+0x64>
 8003bde:	270c      	movs	r7, #12
 8003be0:	0039      	movs	r1, r7
 8003be2:	0030      	movs	r0, r6
 8003be4:	f7ff ffa8 	bl	8003b38 <sbrk_aligned>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d034      	beq.n	8003c56 <_malloc_r+0xda>
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	19df      	adds	r7, r3, r7
 8003bf0:	6027      	str	r7, [r4, #0]
 8003bf2:	e013      	b.n	8003c1c <_malloc_r+0xa0>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	dacb      	bge.n	8003b90 <_malloc_r+0x14>
 8003bf8:	230c      	movs	r3, #12
 8003bfa:	2500      	movs	r5, #0
 8003bfc:	6033      	str	r3, [r6, #0]
 8003bfe:	0028      	movs	r0, r5
 8003c00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	1bd1      	subs	r1, r2, r7
 8003c06:	d420      	bmi.n	8003c4a <_malloc_r+0xce>
 8003c08:	290b      	cmp	r1, #11
 8003c0a:	d917      	bls.n	8003c3c <_malloc_r+0xc0>
 8003c0c:	19e2      	adds	r2, r4, r7
 8003c0e:	6027      	str	r7, [r4, #0]
 8003c10:	42a3      	cmp	r3, r4
 8003c12:	d111      	bne.n	8003c38 <_malloc_r+0xbc>
 8003c14:	602a      	str	r2, [r5, #0]
 8003c16:	6863      	ldr	r3, [r4, #4]
 8003c18:	6011      	str	r1, [r2, #0]
 8003c1a:	6053      	str	r3, [r2, #4]
 8003c1c:	0030      	movs	r0, r6
 8003c1e:	0025      	movs	r5, r4
 8003c20:	f000 f86c 	bl	8003cfc <__malloc_unlock>
 8003c24:	2207      	movs	r2, #7
 8003c26:	350b      	adds	r5, #11
 8003c28:	1d23      	adds	r3, r4, #4
 8003c2a:	4395      	bics	r5, r2
 8003c2c:	1aea      	subs	r2, r5, r3
 8003c2e:	429d      	cmp	r5, r3
 8003c30:	d0e5      	beq.n	8003bfe <_malloc_r+0x82>
 8003c32:	1b5b      	subs	r3, r3, r5
 8003c34:	50a3      	str	r3, [r4, r2]
 8003c36:	e7e2      	b.n	8003bfe <_malloc_r+0x82>
 8003c38:	605a      	str	r2, [r3, #4]
 8003c3a:	e7ec      	b.n	8003c16 <_malloc_r+0x9a>
 8003c3c:	6862      	ldr	r2, [r4, #4]
 8003c3e:	42a3      	cmp	r3, r4
 8003c40:	d101      	bne.n	8003c46 <_malloc_r+0xca>
 8003c42:	602a      	str	r2, [r5, #0]
 8003c44:	e7ea      	b.n	8003c1c <_malloc_r+0xa0>
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	e7e8      	b.n	8003c1c <_malloc_r+0xa0>
 8003c4a:	0023      	movs	r3, r4
 8003c4c:	6864      	ldr	r4, [r4, #4]
 8003c4e:	e7a7      	b.n	8003ba0 <_malloc_r+0x24>
 8003c50:	002c      	movs	r4, r5
 8003c52:	686d      	ldr	r5, [r5, #4]
 8003c54:	e7af      	b.n	8003bb6 <_malloc_r+0x3a>
 8003c56:	230c      	movs	r3, #12
 8003c58:	0030      	movs	r0, r6
 8003c5a:	6033      	str	r3, [r6, #0]
 8003c5c:	f000 f84e 	bl	8003cfc <__malloc_unlock>
 8003c60:	e7cd      	b.n	8003bfe <_malloc_r+0x82>
 8003c62:	46c0      	nop			; (mov r8, r8)
 8003c64:	2000020c 	.word	0x2000020c

08003c68 <_realloc_r>:
 8003c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c6a:	0007      	movs	r7, r0
 8003c6c:	000e      	movs	r6, r1
 8003c6e:	0014      	movs	r4, r2
 8003c70:	2900      	cmp	r1, #0
 8003c72:	d105      	bne.n	8003c80 <_realloc_r+0x18>
 8003c74:	0011      	movs	r1, r2
 8003c76:	f7ff ff81 	bl	8003b7c <_malloc_r>
 8003c7a:	0005      	movs	r5, r0
 8003c7c:	0028      	movs	r0, r5
 8003c7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c80:	2a00      	cmp	r2, #0
 8003c82:	d103      	bne.n	8003c8c <_realloc_r+0x24>
 8003c84:	f7ff ff0e 	bl	8003aa4 <_free_r>
 8003c88:	0025      	movs	r5, r4
 8003c8a:	e7f7      	b.n	8003c7c <_realloc_r+0x14>
 8003c8c:	f000 f83e 	bl	8003d0c <_malloc_usable_size_r>
 8003c90:	9001      	str	r0, [sp, #4]
 8003c92:	4284      	cmp	r4, r0
 8003c94:	d803      	bhi.n	8003c9e <_realloc_r+0x36>
 8003c96:	0035      	movs	r5, r6
 8003c98:	0843      	lsrs	r3, r0, #1
 8003c9a:	42a3      	cmp	r3, r4
 8003c9c:	d3ee      	bcc.n	8003c7c <_realloc_r+0x14>
 8003c9e:	0021      	movs	r1, r4
 8003ca0:	0038      	movs	r0, r7
 8003ca2:	f7ff ff6b 	bl	8003b7c <_malloc_r>
 8003ca6:	1e05      	subs	r5, r0, #0
 8003ca8:	d0e8      	beq.n	8003c7c <_realloc_r+0x14>
 8003caa:	9b01      	ldr	r3, [sp, #4]
 8003cac:	0022      	movs	r2, r4
 8003cae:	429c      	cmp	r4, r3
 8003cb0:	d900      	bls.n	8003cb4 <_realloc_r+0x4c>
 8003cb2:	001a      	movs	r2, r3
 8003cb4:	0031      	movs	r1, r6
 8003cb6:	0028      	movs	r0, r5
 8003cb8:	f7ff fed7 	bl	8003a6a <memcpy>
 8003cbc:	0031      	movs	r1, r6
 8003cbe:	0038      	movs	r0, r7
 8003cc0:	f7ff fef0 	bl	8003aa4 <_free_r>
 8003cc4:	e7da      	b.n	8003c7c <_realloc_r+0x14>
	...

08003cc8 <_sbrk_r>:
 8003cc8:	2300      	movs	r3, #0
 8003cca:	b570      	push	{r4, r5, r6, lr}
 8003ccc:	4d06      	ldr	r5, [pc, #24]	; (8003ce8 <_sbrk_r+0x20>)
 8003cce:	0004      	movs	r4, r0
 8003cd0:	0008      	movs	r0, r1
 8003cd2:	602b      	str	r3, [r5, #0]
 8003cd4:	f7fc ffba 	bl	8000c4c <_sbrk>
 8003cd8:	1c43      	adds	r3, r0, #1
 8003cda:	d103      	bne.n	8003ce4 <_sbrk_r+0x1c>
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d000      	beq.n	8003ce4 <_sbrk_r+0x1c>
 8003ce2:	6023      	str	r3, [r4, #0]
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	20000214 	.word	0x20000214

08003cec <__malloc_lock>:
 8003cec:	b510      	push	{r4, lr}
 8003cee:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <__malloc_lock+0xc>)
 8003cf0:	f000 f814 	bl	8003d1c <__retarget_lock_acquire_recursive>
 8003cf4:	bd10      	pop	{r4, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	20000218 	.word	0x20000218

08003cfc <__malloc_unlock>:
 8003cfc:	b510      	push	{r4, lr}
 8003cfe:	4802      	ldr	r0, [pc, #8]	; (8003d08 <__malloc_unlock+0xc>)
 8003d00:	f000 f80d 	bl	8003d1e <__retarget_lock_release_recursive>
 8003d04:	bd10      	pop	{r4, pc}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	20000218 	.word	0x20000218

08003d0c <_malloc_usable_size_r>:
 8003d0c:	1f0b      	subs	r3, r1, #4
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	1f18      	subs	r0, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	da01      	bge.n	8003d1a <_malloc_usable_size_r+0xe>
 8003d16:	580b      	ldr	r3, [r1, r0]
 8003d18:	18c0      	adds	r0, r0, r3
 8003d1a:	4770      	bx	lr

08003d1c <__retarget_lock_acquire_recursive>:
 8003d1c:	4770      	bx	lr

08003d1e <__retarget_lock_release_recursive>:
 8003d1e:	4770      	bx	lr

08003d20 <_init>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr

08003d2c <_fini>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr
